#!/usr/bin/env python3
"""
[UNICODE_7570] [UNICODE_30C7]

60[UNICODE_6B73]
"""

import sys
import os
import asyncio
from datetime import datetime

def demo_story_content():
    """[UNICODE_30B9]"""
    print("[UNICODE_1F4D6] [UNICODE_7570] [UNICODE_30C7]")
    print("=" * 60)
    
    # Story DAG[UNICODE_304B]
    sys.path.append(os.path.join('services', 'story-dag'))
    from main import db
    
    # [UNICODE_8EE2]
    reincarnation_chapter = None
    for chapter in db.chapters.values():
        if "[UNICODE_8EE2]" in chapter.title or "[UNICODE_7570]" in chapter.title:
            reincarnation_chapter = chapter
            break
    
    if reincarnation_chapter:
        print(f"[UNICODE_1F4DA] Chapter: {reincarnation_chapter.title}")
        print(f"[UNICODE_1F4DD] Description: {reincarnation_chapter.description}")
        print(f"[UNICODE_1F3AF] Therapeutic Focus: {', '.join(reincarnation_chapter.therapeutic_focus)}")
        print()
        
        # [UNICODE_30CE]
        chapter_nodes = [n for n in db.nodes.values() if n.chapter_id == reincarnation_chapter.chapter_id]
        chapter_nodes.sort(key=lambda x: x.node_type.value)  # opening, choice, resolution[UNICODE_9806]
        
        for i, node in enumerate(chapter_nodes, 1):
            print(f"[UNICODE_1F3AC] Scene {i}: {node.title} ({node.node_type.value})")
            print("-" * 50)
            print(node.content)
            print()
            
            if node.companion_effects:
                print(f"[UNICODE_1F465] Companion Effects: {node.companion_effects}")
            if node.mood_effects:
                print(f"[UNICODE_1F60A] Mood Effects: {node.mood_effects}")
            if node.therapeutic_tags:
                print(f"[UNICODE_1F48A] Therapeutic Tags: {', '.join(node.therapeutic_tags)}")
            print()

async def demo_ai_generation():
    """AI[UNICODE_751F]"""
    print("[UNICODE_1F916] AI Story Generation [UNICODE_30C7]")
    print("=" * 60)
    
    sys.path.append(os.path.join('services', 'ai-story'))
    from main import deepseek_client
    
    scenarios = [
        ("opening", "[UNICODE_30AA]"),
        ("challenge", "[UNICODE_56F0]"),
        ("companion", "[UNICODE_4EF2]"),
        ("level", "[UNICODE_30EC]")
    ]
    
    for scenario, description in scenarios:
        print(f"[UNICODE_1F3AD] {description}")
        print("-" * 40)
        
        response = await deepseek_client._mock_deepseek_response(scenario, None)
        content = response["content"]
        
        print(content)
        print(f"[UNICODE_23F1] Generation time: {response['generation_time_ms']}ms")
        print()

def demo_task_integration():
    """[UNICODE_30BF]"""
    print("[UNICODE_2694] Task Integration [UNICODE_30C7]")
    print("=" * 60)
    
    sys.path.append(os.path.join('services', 'task-story-integration'))
    from main import ServiceIntegration, StoryChoiceHook
    
    service = ServiceIntegration()
    
    # [UNICODE_7570]
    reincarnation_choices = [
        "[UNICODE_52C7]",
        "[UNICODE_8EE2]", 
        "[UNICODE_524D]",
        "[UNICODE_7570]"
    ]
    
    for i, choice_text in enumerate(reincarnation_choices, 1):
        print(f"[UNICODE_1F3AF] Choice {i}: {choice_text}")
        print("-" * 50)
        
        choice_hook = StoryChoiceHook(
            choice_id=f"reincarnation_choice_{i}",
            choice_text=choice_text,
            habit_tag=f"hero_action_{i}",
            therapeutic_weight=1.2
        )
        
        task_data = service._build_task_from_choice(choice_hook)
        
        print(f"[UNICODE_1F4CB] Generated Task:")
        print(f"   Type: {task_data['task_type']}")
        print(f"   Title: {task_data['title']}")
        print(f"   Description: {task_data['description']}")
        print(f"   Crystal Attribute: {task_data['primary_crystal_attribute']}")
        print(f"   Difficulty: {task_data['difficulty']}")
        print()

def demo_therapeutic_impact():
    """[UNICODE_6CBB]"""
    print("[UNICODE_1F48A] Therapeutic Impact [UNICODE_30C7]")
    print("=" * 60)
    
    therapeutic_elements = {
        "[UNICODE_1F504] Second Chance Motivation": [
            "[UNICODE_300C]60[UNICODE_5E74]",
            "[UNICODE_300C]",
            "[UNICODE_300C]"
        ],
        "[UNICODE_1F4C8] Growth Mindset": [
            "[UNICODE_300C]",
            "[UNICODE_300C] = [UNICODE_7570]",
            "[UNICODE_300C]"
        ],
        "[UNICODE_1F91D] Social Support": [
            "[UNICODE_300C]",
            "[UNICODE_300C]",
            "[UNICODE_300C]"
        ],
        "[UNICODE_1F3AF] Meta-Gaming Effect": [
            "[UNICODE_300C] = [UNICODE_4EBA]",
            "[UNICODE_300C]",
            "[UNICODE_300C]"
        ]
    }
    
    for category, examples in therapeutic_elements.items():
        print(f"{category}")
        for example in examples:
            print(f"   [UNICODE_2022] {example}")
        print()

def demo_user_scenarios():
    """[UNICODE_30E6]"""
    print("[UNICODE_1F465] User Scenarios [UNICODE_30C7]")
    print("=" * 60)
    
    user_personas = [
        {
            "name": "[UNICODE_7530] (35[UNICODE_6B73], [UNICODE_4F1A])",
            "background": "[UNICODE_4ED5]",
            "regrets": ["[UNICODE_30B9]", "[UNICODE_5065]"],
            "reincarnation_appeal": "60[UNICODE_6B73]"
        },
        {
            "name": "[UNICODE_4F50] (50[UNICODE_6B73], [UNICODE_4E3B])",
            "background": "[UNICODE_5B50]",
            "regrets": ["[UNICODE_5922]", "[UNICODE_81EA]"],
            "reincarnation_appeal": "[UNICODE_7B2C]"
        },
        {
            "name": "[UNICODE_5C71] (28[UNICODE_6B73], [UNICODE_30D5])",
            "background": "[UNICODE_5C06]",
            "regrets": ["[UNICODE_3084]", "[UNICODE_7D99]"],
            "reincarnation_appeal": "[UNICODE_30EC]"
        }
    ]
    
    for persona in user_personas:
        print(f"[UNICODE_1F464] {persona['name']}")
        print(f"   Background: {persona['background']}")
        print(f"   Regrets: {', '.join(persona['regrets'])}")
        print(f"   [UNICODE_1F31F] Appeal: {persona['reincarnation_appeal']}")
        print()

def demo_game_revolution():
    """[UNICODE_30B2]"""
    print("[UNICODE_1F680] Game Industry Revolution [UNICODE_30C7]")
    print("=" * 60)
    
    revolution_points = [
        {
            "title": "[UNICODE_1F3AE] [UNICODE_5F93]",
            "description": "[UNICODE_30A8]",
            "limitation": "[UNICODE_73FE]"
        },
        {
            "title": "[UNICODE_1F48A] [UNICODE_5F93]",
            "description": "[UNICODE_6CBB]",
            "limitation": "[UNICODE_7D99]"
        },
        {
            "title": "[UNICODE_1F31F] [UNICODE_7570]",
            "description": "[UNICODE_6CBB]",
            "innovation": "[UNICODE_30B2] = [UNICODE_4EBA]"
        }
    ]
    
    for point in revolution_points:
        print(f"{point['title']}")
        print(f"   Description: {point['description']}")
        if 'limitation' in point:
            print(f"   [UNICODE_274C] Limitation: {point['limitation']}")
        if 'innovation' in point:
            print(f"   [UNICODE_2728] Innovation: {point['innovation']}")
        print()
    
    print("[UNICODE_1F3AF] [UNICODE_9769]:")
    revolutionary_features = [
        "60[UNICODE_6B73]",
        "[UNICODE_73FE]",
        "[UNICODE_524D]",
        "[UNICODE_65E5]",
        "[UNICODE_6CBB]",
        "[UNICODE_5168]"
    ]
    
    for feature in revolutionary_features:
        print(f"   [UNICODE_2705] {feature}")
    print()
    
    print("[UNICODE_1F4B0] [UNICODE_5E02]:")
    market_impact = [
        "[UNICODE_30B2]: [UNICODE_65B0]",
        "[UNICODE_533B]: [UNICODE_30B2]",
        "[UNICODE_6559]: [UNICODE_697D]",
        "[UNICODE_4F01]: [UNICODE_793E]",
        "[UNICODE_9AD8]: [UNICODE_30A2]"
    ]
    
    for impact in market_impact:
        print(f"   [UNICODE_1F48E] {impact}")

async def main():
    """[UNICODE_30E1]"""
    
    print("[UNICODE_1F31F]" * 30)
    print("[UNICODE_1F3AE] [UNICODE_7570]")
    print("[UNICODE_1F3AF] [UNICODE_30B2]")
    print("[UNICODE_1F31F]" * 30)
    print()
    
    # [UNICODE_30C7]
    demo_sections = [
        ("Story Content", demo_story_content),
        ("AI Generation", demo_ai_generation),
        ("Task Integration", demo_task_integration),
        ("Therapeutic Impact", demo_therapeutic_impact),
        ("User Scenarios", demo_user_scenarios),
        ("Game Revolution", demo_game_revolution)
    ]
    
    for section_name, demo_func in demo_sections:
        if asyncio.iscoroutinefunction(demo_func):
            await demo_func()
        else:
            demo_func()
        
        input("Press Enter to continue to next section...")
        print("\n" + "="*80 + "\n")
    
    # [UNICODE_6700]
    print("[UNICODE_1F389] [UNICODE_30C7]")
    print()
    print("[UNICODE_1F680] [UNICODE_3053]")
    print("   [UNICODE_2022] [UNICODE_30D7]60[UNICODE_6B73]")
    print("   [UNICODE_2022] [UNICODE_73FE]")
    print("   [UNICODE_2022] [UNICODE_524D]")
    print("   [UNICODE_2022] [UNICODE_65E5]")
    print("   [UNICODE_2022] [UNICODE_6CBB]")
    print()
    print("[UNICODE_1F4AA] [UNICODE_307E] = [UNICODE_4EBA]")
    print("[UNICODE_1F31F] [UNICODE_672A]")
    print("[UNICODE_1F3AE] [UNICODE_30B2]")

if __name__ == "__main__":
    asyncio.run(main())