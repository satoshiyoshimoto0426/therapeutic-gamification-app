name: Therapeutic Gamification App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: therapeutic-gamification-app
  REGION: asia-northeast1

jobs:
  # 1. 自動テスト実行
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Install Node dependencies
      run: |
        cd frontend
        npm ci
    
    # Python単体テスト
    - name: Run Python unit tests
      run: |
        pytest shared/tests/ -v --cov=shared --cov-report=xml --cov-report=html
        pytest services/*/test_*.py -v --cov=services --cov-report=xml --cov-append
    
    # TypeScript/JavaScript テスト
    - name: Run Frontend tests
      run: |
        cd frontend
        npm run test -- --coverage --watchAll=false
    
    # 統合テスト
    - name: Run Integration tests
      run: |
        python test_integration_simple.py
        python run_integration_e2e_tests.py
    
    # 本番環境設定検証テスト
    - name: Run Production config validation tests
      run: |
        python infrastructure/production/test_production_config_validation.py
    
    # コードカバレッジレポート
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml,./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    # セキュリティスキャン
    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r services/ shared/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.node-version }}
        path: |
          coverage.xml
          htmlcov/
          frontend/coverage/
          bandit-report.json
          safety-report.json

  # 2. コード品質チェック
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install quality tools
      run: |
        pip install black flake8 mypy pylint
    
    - name: Run Black formatter check
      run: |
        black --check --diff services/ shared/
    
    - name: Run Flake8 linter
      run: |
        flake8 services/ shared/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy type checker
      run: |
        mypy services/ shared/ --ignore-missing-imports
    
    - name: Run Pylint
      run: |
        pylint services/ shared/ --disable=C0114,C0115,C0116 --fail-under=8.0

  # 3. Docker イメージビルド
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # 4. セキュリティスキャン
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 5. ステージング環境デプロイ
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
          --image=${{ needs.build.outputs.image-tag }} \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=staging" \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=1 \
          --max-instances=10 \
          --timeout=300s \
          --concurrency=100
    
    - name: Run smoke tests on staging
      run: |
        STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region=${{ env.REGION }} --format="value(status.url)")
        python test_deployment.py --url=$STAGING_URL --environment=staging
    
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#therapeutic-app-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # 6. 本番環境デプロイ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    # Blue-Green デプロイメント準備
    - name: Prepare Blue-Green deployment
      id: prepare-deploy
      run: |
        # 現在のサービス情報取得
        CURRENT_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.latestReadyRevisionName)" 2>/dev/null || echo "")
        echo "current-revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
        
        # 新しいリビジョン名生成
        NEW_REVISION="${{ env.SERVICE_NAME }}-$(date +%Y%m%d-%H%M%S)"
        echo "new-revision=$NEW_REVISION" >> $GITHUB_OUTPUT
    
    - name: Deploy new revision (Green)
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ needs.build.outputs.image-tag }} \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=production" \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=5 \
          --max-instances=1000 \
          --timeout=300s \
          --concurrency=100 \
          --revision-suffix=$(echo ${{ steps.prepare-deploy.outputs.new-revision }} | cut -d'-' -f2-) \
          --no-traffic
    
    - name: Run production health checks
      id: health-check
      run: |
        # 新しいリビジョンのURLを取得
        NEW_REVISION_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.traffic[0].revisionName)" | head -1)
        REVISION_URL="https://$NEW_REVISION_URL---${{ env.SERVICE_NAME }}-${{ env.REGION }}.a.run.app"
        
        # ヘルスチェック実行
        python test_deployment.py --url=$REVISION_URL --environment=production --health-check-only
        
        echo "health-check-passed=true" >> $GITHUB_OUTPUT
    
    - name: Gradual traffic migration
      if: steps.health-check.outputs.health-check-passed == 'true'
      run: |
        # 段階的トラフィック移行
        echo "Starting gradual traffic migration..."
        
        # 10%トラフィック
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=${{ steps.prepare-deploy.outputs.new-revision }}=10
        
        sleep 300  # 5分待機
        
        # ヘルスチェック
        python test_deployment.py --url=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)") --environment=production --quick-check
        
        # 50%トラフィック
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=${{ steps.prepare-deploy.outputs.new-revision }}=50
        
        sleep 300  # 5分待機
        
        # 最終ヘルスチェック
        python test_deployment.py --url=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)") --environment=production --quick-check
        
        # 100%トラフィック
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=${{ steps.prepare-deploy.outputs.new-revision }}=100
    
    - name: Clean up old revisions
      if: success()
      run: |
        # 古いリビジョンを削除（最新3つを保持）
        gcloud run revisions list \
          --service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(metadata.name)" \
          --sort-by="~metadata.creationTimestamp" \
          | tail -n +4 \
          | xargs -I {} gcloud run revisions delete {} --region=${{ env.REGION }} --quiet || true
    
    - name: Update deployment status
      if: always()
      run: |
        # デプロイメント状況をFirestoreに記録
        python infrastructure/production/update_deployment_status.py \
          --revision=${{ steps.prepare-deploy.outputs.new-revision }} \
          --status=${{ job.status }} \
          --commit=${{ github.sha }} \
          --image=${{ needs.build.outputs.image-tag }}
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#therapeutic-app-production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "attachments": [{
              "color": "${{ job.status }}" === "success" ? "good" : "danger",
              "title": "Production Deployment ${{ job.status }}",
              "fields": [
                {
                  "title": "Service",
                  "value": "${{ env.SERVICE_NAME }}",
                  "short": true
                },
                {
                  "title": "Revision",
                  "value": "${{ steps.prepare-deploy.outputs.new-revision }}",
                  "short": true
                },
                {
                  "title": "Image",
                  "value": "${{ needs.build.outputs.image-tag }}",
                  "short": false
                }
              ]
            }]
          }

  # 7. ロールバック機能
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get previous stable revision
      id: get-previous
      run: |
        # 最後に成功したリビジョンを取得
        PREVIOUS_REVISION=$(python infrastructure/production/get_last_stable_revision.py --service=${{ env.SERVICE_NAME }})
        echo "previous-revision=$PREVIOUS_REVISION" >> $GITHUB_OUTPUT
    
    - name: Rollback to previous revision
      if: steps.get-previous.outputs.previous-revision != ''
      run: |
        echo "Rolling back to revision: ${{ steps.get-previous.outputs.previous-revision }}"
        
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=${{ steps.get-previous.outputs.previous-revision }}=100
    
    - name: Verify rollback
      if: steps.get-previous.outputs.previous-revision != ''
      run: |
        sleep 60  # 1分待機
        python test_deployment.py --url=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)") --environment=production --quick-check
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: custom
        channel: '#therapeutic-app-emergency'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            "attachments": [{
              "color": "warning",
              "title": "🚨 Production Rollback Executed",
              "fields": [
                {
                  "title": "Service",
                  "value": "${{ env.SERVICE_NAME }}",
                  "short": true
                },
                {
                  "title": "Rolled back to",
                  "value": "${{ steps.get-previous.outputs.previous-revision }}",
                  "short": true
                },
                {
                  "title": "Reason",
                  "value": "Deployment failure detected",
                  "short": false
                }
              ]
            }]
          }

  # 8. デプロイメント後監視
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up monitoring
      run: |
        # 15分間のデプロイメント後監視を開始
        python infrastructure/production/post_deployment_monitoring.py \
          --service=${{ env.SERVICE_NAME }} \
          --duration=15 \
          --alert-threshold=0.05
    
    - name: Generate deployment report
      if: always()
      run: |
        python infrastructure/production/generate_deployment_report.py \
          --service=${{ env.SERVICE_NAME }} \
          --commit=${{ github.sha }} \
          --output=deployment-report.json
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: deployment-report
        path: deployment-report.json