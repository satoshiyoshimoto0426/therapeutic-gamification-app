"""
[UNICODE_30D1]
"""

def test_performance_monitor():
    """[UNICODE_30D1]"""
    from main import PerformanceMonitor, PerformanceMetrics
    from datetime import datetime
    
    print("1. [UNICODE_30D1]")
    monitor = PerformanceMonitor()
    
    # [UNICODE_30E1]
    metric = PerformanceMetrics(
        endpoint="/api/test",
        response_time=0.5,
        timestamp=datetime.now(),
        status_code=200,
        cache_hit=False
    )
    monitor.record_metric(metric)
    
    # P95[UNICODE_8A08]
    p95 = monitor.get_p95_latency()
    print(f"   P95[UNICODE_30EC]: {p95:.3f}[UNICODE_79D2]")
    print(f"   [UNICODE_76EE](1.2[UNICODE_79D2])[UNICODE_4EE5]: {'OK' if p95 <= 1.2 else 'NG'}")
    
    return True

def test_cache_manager():
    """[UNICODE_30AD]"""
    from main import CacheManager
    
    print("2. [UNICODE_30AD]")
    cache = CacheManager()
    
    # [UNICODE_30AD]
    test_data = {"user_id": "123", "level": 5}
    cache.set("test_key", test_data)
    retrieved = cache.get("test_key")
    
    print(f"   [UNICODE_30AD]: {'OK' if retrieved == test_data else 'NG'}")
    
    # [UNICODE_7D71]
    stats = cache.get_cache_stats()
    print(f"   [UNICODE_30AD]: {stats['total_entries']}")
    
    return True

def test_rate_limiter():
    """[UNICODE_30EC]"""
    from main import RateLimiter
    
    print("3. [UNICODE_30EC]")
    limiter = RateLimiter(max_requests=3, window_minutes=1)  # [UNICODE_5C0F]
    
    # [UNICODE_5236]
    ip = "127.0.0.1"
    allowed_count = 0
    
    for i in range(5):
        if limiter.is_allowed(ip):
            allowed_count += 1
    
    print(f"   [UNICODE_8A31]: {allowed_count}/5")
    print(f"   [UNICODE_5236]: {'OK' if allowed_count == 3 else 'NG'}")
    
    return True

def test_query_optimizer():
    """[UNICODE_30AF]"""
    from main import QueryOptimizer
    
    print("4. [UNICODE_30AF]")
    optimizer = QueryOptimizer()
    
    # [UNICODE_30E6]
    result = optimizer.optimize_user_query("test_user")
    print(f"   [UNICODE_30E6]: {'OK' if 'user_profile' in result else 'NG'}")
    
    # Mandala[UNICODE_30AF]
    mandala_result = optimizer.optimize_mandala_query("test_user")
    print(f"   Mandala[UNICODE_30AF]: {'OK' if 'grid' in mandala_result else 'NG'}")
    
    return True

def test_api_endpoints():
    """API[UNICODE_30A8]"""
    from main import get_user_dashboard, get_performance_metrics
    import time
    
    print("5. API[UNICODE_30A8]")
    
    # [UNICODE_30C0]
    start_time = time.time()
    result = get_user_dashboard("test_user")
    response_time = time.time() - start_time
    
    print(f"   [UNICODE_30C0]: {response_time:.3f}[UNICODE_79D2]")
    print(f"   [UNICODE_30EC]: {'OK' if 'user' in result else 'NG'}")
    
    # [UNICODE_30E1]
    metrics = get_performance_metrics()
    print(f"   [UNICODE_30E1]: {'OK' if 'performance' in metrics else 'NG'}")
    
    return True

def main():
    """[UNICODE_30E1]"""
    print("[UNICODE_30D1] - [UNICODE_9AD8]")
    print("=" * 40)
    
    tests = [
        test_performance_monitor,
        test_cache_manager,
        test_rate_limiter,
        test_query_optimizer,
        test_api_endpoints
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"   [UNICODE_30A8]: {e}")
            print()
    
    print("=" * 40)
    print(f"[UNICODE_30C6]: {passed}/{total} [UNICODE_6210]")
    
    if passed == total:
        print("\n[UNICODE_2713] [UNICODE_5168]")
        print("\n[UNICODE_8981]:")
        print("[UNICODE_2713] 1.2[UNICODE_79D2]P95[UNICODE_30EC]")
        print("[UNICODE_2713] [UNICODE_30AD]") 
        print("[UNICODE_2713] [UNICODE_30EC]120req/min/IP[UNICODE_FF09]")
        print("[UNICODE_2713] [UNICODE_30D1]")
    else:
        print(f"\n[UNICODE_26A0] {total - passed}[UNICODE_500B]")

if __name__ == "__main__":
    main()