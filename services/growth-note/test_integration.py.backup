"""
[UNICODE_30B0]

[UNICODE_5168]
"""

import pytest
import json
from datetime import datetime, date, timedelta
from main import GrowthNoteSystem
from line_bot_integration import ReflectionLINEInterface
from reflection_continuity_system import ReflectionContinuitySystem

class TestGrowthNoteIntegration:
    
    def setup_method(self):
        """[UNICODE_5404]"""
        self.growth_note_system = GrowthNoteSystem()
        self.line_interface = ReflectionLINEInterface(self.growth_note_system)
        self.continuity_system = ReflectionContinuitySystem(self.growth_note_system)
    
    def test_complete_reflection_flow(self):
        """[UNICODE_5B8C]"""
        user_id = "integration_user"
        user_context = {
            "mood": 3,
            "completed_tasks": 4,
            "recent_struggles": ["social", "work_study"]
        }
        
        # 1. 22:00[UNICODE_30D7]
        prompt_message = self.line_interface.create_reflection_prompt_message(user_id, user_context)
        assert prompt_message["type"] == "flex"
        assert user_id in self.line_interface.active_sessions
        
        # 2. [UNICODE_30D5]
        form = self.line_interface.create_growth_note_form(user_id)
        assert form["type"] == "flex"
        assert form["contents"]["type"] == "carousel"
        assert len(form["contents"]["contents"]) == 4
        
        # 3. [UNICODE_6BB5]
        responses = [
            ("current_problems", "[UNICODE_4EBA]"),
            ("ideal_world", "[UNICODE_53CB]"),
            ("ideal_emotions", "[UNICODE_5E78]"),
            ("tomorrow_actions", "[UNICODE_660E]")
        ]
        
        for i, (field, response) in enumerate(responses):
            result = self.line_interface.process_reflection_input(user_id, field, response)
            
            if i < len(responses) - 1:
                # [UNICODE_9014]
                assert result["type"] == "text"
                assert "[UNICODE_56DE]" in result["text"]
                assert f"[UNICODE_9032]: {i+1}/4" in result["text"]
            else:
                # [UNICODE_6700]
                assert result["type"] == "flex"
                assert "[UNICODE_632F]" in result["altText"]
        
        # 4. [UNICODE_30BB]
        session = self.line_interface.get_session_status(user_id)
        assert session.completed
        assert len(session.responses) == 4
        assert session.xp_earned > 0
        
        # 5. [UNICODE_30B9]
        streak_result = self.continuity_system.update_reflection_streak(user_id, True)
        assert streak_result["status"] == "completed"
        assert streak_result["streak"] == 1
        
        # 6. [UNICODE_30B9]
        analysis = self.growth_note_system.process_reflection(session.responses)
        self.continuity_system.update_story_personalization_data(user_id, analysis)
        
        # 7. [UNICODE_30D1]
        context = self.continuity_system.get_story_personalization_context(user_id)
        assert context["user_id"] == user_id
        assert len(context["recent_themes"]) > 0
        assert context["reflection_frequency"] == 1
    
    def test_streak_and_milestone_flow(self):
        """[UNICODE_30B9]"""
        user_id = "streak_user"
        
        # 3[UNICODE_65E5]
        for day in range(3):
            # [UNICODE_632F]
            user_context = {"mood": 3 + day, "completed_tasks": day + 1}
            self.line_interface.create_reflection_prompt_message(user_id, user_context)
            
            # [UNICODE_56DE]
            responses = {
                "current_problems": f"Day {day+1}: [UNICODE_554F]",
                "ideal_world": f"Day {day+1}: [UNICODE_7406]",
                "ideal_emotions": f"Day {day+1}: [UNICODE_611F]",
                "tomorrow_actions": f"Day {day+1}: [UNICODE_884C]"
            }
            
            for field, response in responses.items():
                self.line_interface.process_reflection_input(user_id, field, response)
            
            # [UNICODE_30B9]
            if day > 0:
                streak = self.continuity_system.user_streaks[user_id]
                streak.last_reflection_date = date.today() - timedelta(days=1)
            
            result = self.continuity_system.update_reflection_streak(user_id, True)
            
            if day == 2:  # 3[UNICODE_65E5]
                assert result["milestone_reward"] is not None
                assert result["milestone_reward"]["milestone"] == 3
                assert result["milestone_reward"]["xp_bonus"] == 50
            else:
                assert result["milestone_reward"] is None
            
            # [UNICODE_30B9]
            session = self.line_interface.active_sessions[user_id]
            analysis = self.growth_note_system.process_reflection(session.responses)
            self.continuity_system.update_story_personalization_data(user_id, analysis)
        
        # [UNICODE_6700]
        status = self.continuity_system.get_streak_status(user_id)
        assert status["current_streak"] == 3
        assert status["longest_streak"] == 3
        assert status["total_reflections"] == 3
        
        # [UNICODE_30D1]
        context = self.continuity_system.get_story_personalization_context(user_id)
        assert context["reflection_frequency"] == 3
        assert len(context["recent_insights"]) == 3
    
    def test_reminder_flow(self):
        """[UNICODE_30EA]"""
        user_id = "reminder_user"
        
        # [UNICODE_521D]
        user_context = {"mood": 3, "completed_tasks": 2}
        self.line_interface.create_reflection_prompt_message(user_id, user_context)
        
        responses = {
            "current_problems": "[UNICODE_521D]",
            "ideal_world": "[UNICODE_521D]",
            "ideal_emotions": "[UNICODE_521D]",
            "tomorrow_actions": "[UNICODE_521D]"
        }
        
        for field, response in responses.items():
            self.line_interface.process_reflection_input(user_id, field, response)
        
        self.continuity_system.update_reflection_streak(user_id, True)
        
        # 3[UNICODE_65E5]
        streak = self.continuity_system.user_streaks[user_id]
        streak.last_reflection_date = date.today() - timedelta(days=3)
        
        skip_result = self.continuity_system.update_reflection_streak(user_id, False)
        assert skip_result["status"] == "skipped"
        assert skip_result["needs_reminder"] == True
        
        # [UNICODE_30EA]
        reminder = self.continuity_system.generate_reminder_message(user_id, 3)
        assert reminder["type"] == "flex"
        assert "[UNICODE_632F]" in reminder["contents"]["header"]["contents"][0]["text"]
        
        # [UNICODE_30B9]
        status = self.continuity_system.get_streak_status(user_id)
        assert status["current_streak"] == 0  # [UNICODE_30EA]
        assert status["missed_days_in_row"] == 3
        assert status["needs_reminder"] == True
    
    def test_xp_calculation_integration(self):
        """XP[UNICODE_8A08]"""
        user_id = "xp_user"
        
        # [UNICODE_9AD8]
        user_context = {"mood": 4, "completed_tasks": 6}
        self.line_interface.create_reflection_prompt_message(user_id, user_context)
        
        # [UNICODE_8A73]
        detailed_responses = {
            "current_problems": "[UNICODE_4EBA]",
            "ideal_world": "[UNICODE_53CB]",
            "ideal_emotions": "[UNICODE_3068]",
            "tomorrow_actions": "[UNICODE_660E]"
        }
        
        for field, response in detailed_responses.items():
            self.line_interface.process_reflection_input(user_id, field, response)
        
        # [UNICODE_30BB]
        session = self.line_interface.active_sessions[user_id]
        assert session.completed
        
        # [UNICODE_5206]XP[UNICODE_8A08]
        analysis = self.growth_note_system.process_reflection(session.responses)
        xp_earned = self.growth_note_system.calculate_reflection_xp(analysis)
        
        # [UNICODE_9AD8]XP[UNICODE_3088]
        assert xp_earned > 25  # [UNICODE_57FA]XP
        assert session.xp_earned == xp_earned
        
        # [UNICODE_5206]
        assert len(analysis.problem_themes) > 0
        assert len(analysis.key_insights) > 0
        assert analysis.action_orientation.value in ["medium", "high"]
    
    def test_error_handling_integration(self):
        """[UNICODE_30A8]"""
        # [UNICODE_5B58]
        error_response = self.line_interface.process_reflection_input(
            "nonexistent_user", "current_problems", "[UNICODE_30C6]"
        )
        assert error_response["type"] == "text"
        assert "[UNICODE_30A8]" in error_response["text"]
        
        # [UNICODE_5B58]
        error_form = self.line_interface.create_growth_note_form("nonexistent_user")
        assert error_form["type"] == "text"
        assert "[UNICODE_30A8]" in error_form["text"]
        
        # [UNICODE_5B58]
        empty_context = self.continuity_system.get_story_personalization_context("nonexistent_user")
        assert empty_context == {}
    
    def test_session_cleanup_integration(self):
        """[UNICODE_30BB]"""
        # [UNICODE_8907]
        for i in range(3):
            user_id = f"cleanup_user_{i}"
            user_context = {"mood": 3, "completed_tasks": 2}
            self.line_interface.create_reflection_prompt_message(user_id, user_context)
        
        # 1[UNICODE_3064]
        old_session = self.line_interface.active_sessions["cleanup_user_0"]
        old_session.started_at = datetime.now() - timedelta(hours=25)
        
        # [UNICODE_30AF]
        cleaned_count = self.line_interface.cleanup_old_sessions(24)
        
        assert cleaned_count == 1
        assert "cleanup_user_0" not in self.line_interface.active_sessions
        assert "cleanup_user_1" in self.line_interface.active_sessions
        assert "cleanup_user_2" in self.line_interface.active_sessions

def test_demo_functions_integration():
    """[UNICODE_30C7]"""
    from main import demo_growth_note_system
    from line_bot_integration import demo_line_bot_integration
    from reflection_continuity_system import demo_continuity_system
    
    # [UNICODE_5404]
    growth_system, analysis = demo_growth_note_system()
    assert growth_system is not None
    assert analysis is not None
    
    line_interface = demo_line_bot_integration()
    assert line_interface is not None
    assert "user123" in line_interface.active_sessions
    
    continuity_system = demo_continuity_system()
    assert continuity_system is not None
    assert "demo_user" in continuity_system.user_streaks

if __name__ == "__main__":
    pytest.main([__file__, "-v"])