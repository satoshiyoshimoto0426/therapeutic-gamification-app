"""
[UNICODE_30B0]
"""

import pytest
from datetime import datetime
from main import (
    GrowthNoteSystem, 
    EmotionalTone, 
    ActionOrientation,
    ReflectionPrompts,
    ReflectionAnalysis
)

class TestGrowthNoteSystem:
    
    def setup_method(self):
        """[UNICODE_5404]"""
        self.system = GrowthNoteSystem()
    
    def test_generate_reflection_prompt_basic(self):
        """[UNICODE_57FA]"""
        user_context = {
            "mood": 3,
            "completed_tasks": 2,
            "recent_struggles": []
        }
        
        prompts = self.system.generate_reflection_prompt(user_context)
        
        assert isinstance(prompts, ReflectionPrompts)
        assert prompts.current_problems_prompt is not None
        assert prompts.ideal_world_prompt is not None
        assert prompts.ideal_emotions_prompt is not None
        assert prompts.tomorrow_actions_prompt is not None
        assert prompts.estimated_time == "10-15[UNICODE_5206]"
        assert prompts.xp_reward == 25
    
    def test_generate_reflection_prompt_low_mood(self):
        """[UNICODE_4F4E]"""
        user_context = {
            "mood": 1,
            "completed_tasks": 0,
            "recent_struggles": ["mental", "motivation"]
        }
        
        prompts = self.system.generate_reflection_prompt(user_context)
        
        # [UNICODE_4F4E]
        assert "[UNICODE_7121]" in prompts.current_problems_prompt or "[UNICODE_5C11]" in prompts.current_problems_prompt
        assert len(prompts.current_problems_prompt) > 0
    
    def test_generate_reflection_prompt_high_mood(self):
        """[UNICODE_9AD8]"""
        user_context = {
            "mood": 5,
            "completed_tasks": 8,
            "recent_struggles": []
        }
        
        prompts = self.system.generate_reflection_prompt(user_context)
        
        # [UNICODE_9AD8]
        assert "[UNICODE_8ABF]" in prompts.current_problems_prompt or "[UNICODE_524D]" in prompts.ideal_world_prompt
    
    def test_analyze_emotional_tone_positive(self):
        """[UNICODE_30DD]"""
        positive_text = "[UNICODE_3068]"
        
        tone = self.system._analyze_emotional_tone(positive_text)
        
        assert tone in [EmotionalTone.POSITIVE, EmotionalTone.VERY_POSITIVE]
    
    def test_analyze_emotional_tone_negative(self):
        """[UNICODE_30CD]"""
        negative_text = "[UNICODE_60B2]"
        
        tone = self.system._analyze_emotional_tone(negative_text)
        
        assert tone in [EmotionalTone.NEGATIVE, EmotionalTone.VERY_NEGATIVE]
    
    def test_analyze_emotional_tone_neutral(self):
        """[UNICODE_4E2D]"""
        neutral_text = "[UNICODE_666E]"
        
        tone = self.system._analyze_emotional_tone(neutral_text)
        
        assert tone == EmotionalTone.NEUTRAL
    
    def test_analyze_emotional_tone_empty(self):
        """[UNICODE_7A7A]"""
        tone = self.system._analyze_emotional_tone("")
        
        assert tone == EmotionalTone.NEUTRAL
    
    def test_extract_problem_themes(self):
        """[UNICODE_554F]"""
        problems_text = "[UNICODE_4EBA]"
        
        themes = self.system._extract_problem_themes(problems_text)
        
        assert "social" in themes
        assert "work_study" in themes
        assert "health" in themes
        assert "mental" in themes  # [UNICODE_30B9]
    
    def test_extract_problem_themes_empty(self):
        """[UNICODE_7A7A]"""
        themes = self.system._extract_problem_themes("")
        
        assert themes == []
    
    def test_analyze_action_orientation_high(self):
        """[UNICODE_9AD8]"""
        action_text = "[UNICODE_660E]"
        
        orientation = self.system._analyze_action_orientation(action_text)
        
        assert orientation == ActionOrientation.HIGH
    
    def test_analyze_action_orientation_medium(self):
        """[UNICODE_4E2D]"""
        action_text = "[UNICODE_660E]"
        
        orientation = self.system._analyze_action_orientation(action_text)
        
        assert orientation == ActionOrientation.MEDIUM
    
    def test_analyze_action_orientation_low(self):
        """[UNICODE_4F4E]"""
        action_text = "[UNICODE_7279]"
        
        orientation = self.system._analyze_action_orientation(action_text)
        
        assert orientation == ActionOrientation.LOW
    
    def test_analyze_action_orientation_empty(self):
        """[UNICODE_7A7A]"""
        orientation = self.system._analyze_action_orientation("")
        
        assert orientation == ActionOrientation.LOW
    
    def test_process_reflection_complete(self):
        """[UNICODE_5B8C]"""
        reflection_data = {
            "current_problems": "[UNICODE_4EBA]",
            "ideal_world": "[UNICODE_53CB]",
            "ideal_emotions": "[UNICODE_5E78]",
            "tomorrow_actions": "[UNICODE_660E]"
        }
        
        analysis = self.system.process_reflection(reflection_data)
        
        assert isinstance(analysis, ReflectionAnalysis)
        assert isinstance(analysis.emotional_tone, EmotionalTone)
        assert isinstance(analysis.problem_themes, list)
        assert isinstance(analysis.action_orientation, ActionOrientation)
        assert isinstance(analysis.key_insights, list)
        assert isinstance(analysis.story_personalization_data, dict)
        
        # [UNICODE_30B9]
        story_data = analysis.story_personalization_data
        assert "current_challenges" in story_data
        assert "ideal_vision" in story_data
        assert "emotional_state" in story_data
        assert "action_readiness" in story_data
        assert "reflection_timestamp" in story_data
    
    def test_extract_key_insights(self):
        """[UNICODE_30AD]"""
        reflection_data = {
            "current_problems": "[UNICODE_4EBA]",
            "ideal_world": "[UNICODE_53CB]",
            "ideal_emotions": "[UNICODE_5E78]",
            "tomorrow_actions": "[UNICODE_660E]"
        }
        
        insights = self.system._extract_key_insights(reflection_data)
        
        assert isinstance(insights, list)
        assert len(insights) > 0
        assert any("[UNICODE_73FE]" in insight for insight in insights)
        # [UNICODE_884C]25[UNICODE_6587]
        assert any("[UNICODE_5177]" in insight for insight in insights) or len(reflection_data["tomorrow_actions"]) > 25
    
    def test_extract_key_themes(self):
        """[UNICODE_30AD]"""
        text = "[UNICODE_4ED5]"
        
        themes = self.system._extract_key_themes(text)
        
        assert isinstance(themes, list)
        assert "[UNICODE_4ED5]" in themes
        assert "[UNICODE_5BB6]" in themes
        assert "[UNICODE_5E78]" in themes
        assert "[UNICODE_5065]" in themes
        # [UNICODE_81EA]
        expected_themes = ["[UNICODE_4ED5]", "[UNICODE_5BB6]", "[UNICODE_5E78]", "[UNICODE_5065]", "[UNICODE_81EA]"]
        found_themes = [theme for theme in expected_themes if theme in themes]
        assert len(found_themes) >= 4  # 5[UNICODE_3064]4[UNICODE_3064]OK
        assert len(themes) <= 5  # [UNICODE_6700]5[UNICODE_3064]
    
    def test_calculate_reflection_xp_basic(self):
        """[UNICODE_57FA]XP[UNICODE_8A08]"""
        analysis = ReflectionAnalysis(
            emotional_tone=EmotionalTone.POSITIVE,
            problem_themes=["social", "work_study"],
            action_orientation=ActionOrientation.MEDIUM,
            key_insights=["[UNICODE_73FE]"],
            story_personalization_data={}
        )
        
        xp = self.system.calculate_reflection_xp(analysis)
        
        # [UNICODE_30D9]XP(25) + [UNICODE_884C](5) + [UNICODE_30A4](3) + [UNICODE_30C6](4) = 37
        assert xp == 37
    
    def test_calculate_reflection_xp_high_action(self):
        """[UNICODE_9AD8]XP[UNICODE_8A08]"""
        analysis = ReflectionAnalysis(
            emotional_tone=EmotionalTone.POSITIVE,
            problem_themes=["social"],
            action_orientation=ActionOrientation.HIGH,
            key_insights=["[UNICODE_5177]", "[UNICODE_611F]"],
            story_personalization_data={}
        )
        
        xp = self.system.calculate_reflection_xp(analysis)
        
        # [UNICODE_30D9]XP(25) + [UNICODE_884C](10) + [UNICODE_30A4](6) + [UNICODE_30C6](2) = 43
        assert xp == 43
    
    def test_calculate_reflection_xp_minimal(self):
        """[UNICODE_6700]XP[UNICODE_8A08]"""
        analysis = ReflectionAnalysis(
            emotional_tone=EmotionalTone.NEUTRAL,
            problem_themes=[],
            action_orientation=ActionOrientation.LOW,
            key_insights=[],
            story_personalization_data={}
        )
        
        xp = self.system.calculate_reflection_xp(analysis)
        
        # [UNICODE_30D9]XP[UNICODE_306E]
        assert xp == 25
    
    def test_contextual_prompt_selection(self):
        """[UNICODE_30B3]"""
        # [UNICODE_4F4E]
        prompt = self.system._select_contextual_prompt(
            "tomorrow_actions", mood=1, completed_tasks=0, recent_struggles=[]
        )
        
        # [UNICODE_4F4E]
        assert ("[UNICODE_660E]" in prompt or 
                "[UNICODE_660E]" in prompt or 
                "[UNICODE_5C0F]" in prompt)
        
        # [UNICODE_9AD8]
        prompt = self.system._select_contextual_prompt(
            "tomorrow_actions", mood=5, completed_tasks=8, recent_struggles=[]
        )
        
        assert ("[UNICODE_3088]" in prompt or 
                "[UNICODE_3053]" in prompt or 
                "[UNICODE_3053]" in prompt)

def test_demo_function():
    """[UNICODE_30C7]"""
    from main import demo_growth_note_system
    
    system, analysis = demo_growth_note_system()
    
    assert isinstance(system, GrowthNoteSystem)
    assert isinstance(analysis, ReflectionAnalysis)

if __name__ == "__main__":
    pytest.main([__file__, "-v"])