"""
21[UNICODE_65E5]

[UNICODE_30D6]21[UNICODE_65E5]
"""

import asyncio
from datetime import datetime, timedelta
from main import efficacy_engine, EfficacyUpdateRequest, EfficacyGauge, EfficacyLevel

async def test_21_day_habit_formation():
    """21[UNICODE_65E5]"""
    print("21[UNICODE_65E5]")
    print("=" * 50)
    
    user_id = "habit_formation_user"
    therapeutic_focus = "Self-Discipline"
    
    # [UNICODE_624B]
    base_date = datetime(2024, 1, 1)
    
    # [UNICODE_521D]
    gauge = EfficacyGauge(
        user_id=user_id,
        therapeutic_focus=therapeutic_focus,
        current_level=EfficacyLevel.NOVICE,
        current_percentage=0.0,
        consecutive_days=0,
        total_days_active=0,
        last_activity_date=base_date - timedelta(days=1),
        milestone_reached=[],
        passive_skills=[],
        efficacy_history=[]
    )
    
    # [UNICODE_30C6]
    if not hasattr(efficacy_engine, '_test_gauges'):
        efficacy_engine._test_gauges = {}
    efficacy_engine._test_gauges[f"{user_id}_{therapeutic_focus}"] = gauge
    
    # 21[UNICODE_65E5]
    milestone_days = [3, 7, 14, 21]
    
    for day in range(1, 22):
        # [UNICODE_65E5]
        current_date = base_date + timedelta(days=day-1)
        gauge.last_activity_date = current_date - timedelta(days=1)
        
        # [UNICODE_30BF]
        request = EfficacyUpdateRequest(
            user_id=user_id,
            therapeutic_focus=therapeutic_focus,
            task_completed=True,
            task_difficulty=2 + (day % 3),
            mood_rating=3 + (day % 3),
            reflection_quality=3 + (day % 2)
        )
        
        # [UNICODE_52B9]
        # [UNICODE_7D99]
        gauge.consecutive_days = day
        gauge.total_days_active = day
        gauge.last_activity_date = current_date
        
        # [UNICODE_52B9]
        efficacy_increase = efficacy_engine._calculate_efficacy_increase(request, gauge)
        gauge.current_percentage = min(100.0, gauge.current_percentage + efficacy_increase)
        gauge.current_level = efficacy_engine._calculate_efficacy_level(gauge.current_percentage)
        
        # [UNICODE_5C65]
        gauge.efficacy_history.append({
            "date": current_date.date().isoformat(),
            "percentage": gauge.current_percentage,
            "consecutive_days": gauge.consecutive_days,
            "efficacy_increase": efficacy_increase,
            "task_completed": request.task_completed,
            "mood_rating": request.mood_rating
        })
        
        # [UNICODE_30DE]
        milestone_rewards = await efficacy_engine._check_milestones(gauge)
        
        # [UNICODE_30D1]
        newly_unlocked_skills = await efficacy_engine._check_passive_skill_unlocks(gauge)
        
        # [UNICODE_91CD]
        if day in milestone_days:
            print(f"\n{day}[UNICODE_65E5]:")
            print(f"  [UNICODE_2713] [UNICODE_7D99]: {gauge.consecutive_days}[UNICODE_65E5]")
            print(f"  [UNICODE_2713] [UNICODE_52B9]: {gauge.current_level.value}")
            print(f"  [UNICODE_2713] [UNICODE_52B9]: {gauge.current_percentage:.1f}%")
            print(f"  [UNICODE_2713] [UNICODE_30DE]: {len(milestone_rewards)}[UNICODE_500B]")
            print(f"  [UNICODE_2713] [UNICODE_30D1]: {len(newly_unlocked_skills)}[UNICODE_500B]")
            
            if milestone_rewards:
                for reward in milestone_rewards:
                    print(f"    - [UNICODE_30DE]: {reward['milestone'].title}")
                    print(f"      {reward['milestone'].description}")
            
            if newly_unlocked_skills:
                for skill in newly_unlocked_skills:
                    print(f"    - [UNICODE_30D1]: {skill.name}")
                    print(f"      {skill.description}")
            
            # 21[UNICODE_65E5]
            if day == 21:
                print(f"  [UNICODE_2713] [UNICODE_7FD2]:")
                print(f"    - [UNICODE_7DCF]: {len(gauge.passive_skills)}")
                print(f"    - [UNICODE_9054]: {gauge.milestone_reached}")
                
                # 21[UNICODE_65E5]
                expected_skills = [skill for skill in efficacy_engine.passive_skills_pool 
                                 if skill.unlock_requirement <= 21 and skill.therapeutic_focus == therapeutic_focus]
                print(f"    - [UNICODE_671F]: {len(expected_skills)}")
                
                # [UNICODE_304A]
                celebration = efficacy_engine._generate_celebration_message(gauge, milestone_rewards)
                print(f"  [UNICODE_2713] [UNICODE_304A]: {celebration}")
    
    print("\n" + "=" * 50)
    print("[UNICODE_2713] 21[UNICODE_65E5]")
    
    # [UNICODE_6700]
    print(f"\n[UNICODE_6700]:")
    print(f"- [UNICODE_7D99]: {gauge.consecutive_days}[UNICODE_65E5]")
    print(f"- [UNICODE_52B9]: {gauge.current_level.value}")
    print(f"- [UNICODE_52B9]: {gauge.current_percentage:.1f}%")
    print(f"- [UNICODE_9054]: {len(gauge.milestone_reached)}[UNICODE_500B]")
    print(f"- [UNICODE_89E3]: {len(gauge.passive_skills)}[UNICODE_500B]")
    
    # [UNICODE_30D6]
    print(f"\n[UNICODE_30D6]:")
    print(f"- 21[UNICODE_65E5]: {'[UNICODE_2713]' if gauge.consecutive_days >= 21 else '[UNICODE_2717]'}")
    print(f"- [UNICODE_7FD2]: {'[UNICODE_2713]' if 21 in gauge.milestone_reached else '[UNICODE_2717]'}")
    print(f"- [UNICODE_30D1]: {'[UNICODE_2713]' if len(gauge.passive_skills) > 0 else '[UNICODE_2717]'}")
    print(f"- [UNICODE_6CBB]: {'[UNICODE_2713]' if gauge.current_percentage > 50 else '[UNICODE_2717]'}")
    
    return gauge

async def test_multiple_therapeutic_focuses():
    """[UNICODE_8907]"""
    print("\n" + "=" * 50)
    print("[UNICODE_8907]")
    
    user_id = "multi_focus_user"
    focuses = ["Self-Discipline", "Empathy", "Resilience"]
    
    for focus in focuses:
        print(f"\n{focus} [UNICODE_306E]7[UNICODE_65E5]:")
        
        # [UNICODE_5404]7[UNICODE_65E5]
        gauge = EfficacyGauge(
            user_id=user_id,
            therapeutic_focus=focus,
            current_level=EfficacyLevel.NOVICE,
            current_percentage=0.0,
            consecutive_days=0,
            total_days_active=0,
            last_activity_date=datetime.now() - timedelta(days=1),
            milestone_reached=[],
            passive_skills=[],
            efficacy_history=[]
        )
        
        # [UNICODE_30C6]
        efficacy_engine._test_gauges[f"{user_id}_{focus}"] = gauge
        
        for day in range(1, 8):
            gauge.consecutive_days = day
            gauge.total_days_active = day
            gauge.current_percentage += 3.0  # [UNICODE_7C21]
            gauge.current_level = efficacy_engine._calculate_efficacy_level(gauge.current_percentage)
            
            if day == 7:
                milestone_rewards = await efficacy_engine._check_milestones(gauge)
                skills = await efficacy_engine._check_passive_skill_unlocks(gauge)
                
                print(f"  [UNICODE_2713] 7[UNICODE_65E5]: {gauge.current_percentage:.1f}%")
                print(f"  [UNICODE_2713] [UNICODE_30DE]: {len(milestone_rewards)}[UNICODE_500B]")
                print(f"  [UNICODE_2713] [UNICODE_30B9]: {len(skills)}[UNICODE_500B]")
    
    # [UNICODE_30C0]
    dashboard = await efficacy_engine.get_efficacy_dashboard(user_id)
    print(f"\n[UNICODE_7DCF]:")
    print(f"  [UNICODE_2713] [UNICODE_5168]: {dashboard['overall_efficacy_level'].value}")
    print(f"  [UNICODE_2713] [UNICODE_5E73]: {dashboard['average_efficacy_percentage']:.1f}%")
    print(f"  [UNICODE_2713] [UNICODE_6700]: {dashboard['max_consecutive_days']}[UNICODE_65E5]")
    print(f"  [UNICODE_2713] [UNICODE_7DCF]: {dashboard['total_passive_skills']}[UNICODE_500B]")

async def main():
    """[UNICODE_30E1]"""
    # 21[UNICODE_65E5]
    await test_21_day_habit_formation()
    
    # [UNICODE_8907]
    await test_multiple_therapeutic_focuses()
    
    print("\n" + "=" * 50)
    print("[UNICODE_2713] Self-Efficacy Gauge [UNICODE_5168]")
    print("\n[UNICODE_30D6]:")
    print("- 21[UNICODE_65E5] [UNICODE_2713]")
    print("- [UNICODE_30D1] [UNICODE_2713]")
    print("- [UNICODE_6CBB] [UNICODE_2713]")
    print("- 8[UNICODE_3064] [UNICODE_2713]")
    print("- [UNICODE_9577] [UNICODE_2713]")

if __name__ == "__main__":
    asyncio.run(main())