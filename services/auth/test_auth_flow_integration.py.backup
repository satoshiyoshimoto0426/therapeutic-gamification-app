"""
[UNICODE_8A8D]

JWT[UNICODE_8A8D]
[UNICODE_8981]6.1, 10.3[UNICODE_306B]

Requirements: 6.1, 10.3
"""

import pytest
import asyncio
from fastapi.testclient import TestClient
from fastapi import FastAPI, Depends, HTTPException
from datetime import datetime, timedelta
import sys
import os

# Add project root to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from services.auth.main import app
from services.auth.jwt_service import jwt_service, TokenType
from services.auth.auth_middleware import (
    get_current_token, get_current_guardian, auth_service
)
from shared.interfaces.rbac_system import PermissionLevel


class TestAuthFlowIntegration:
    """[UNICODE_8A8D]"""
    
    def setup_method(self):
        """[UNICODE_30C6]"""
        self.client = TestClient(app)
        self.test_guardian_id = "test_guardian_001"
        self.test_user_id = "test_user_001"
        self.test_permission_level = PermissionLevel.TASK_EDIT
    
    def test_complete_authentication_flow(self):
        """[UNICODE_5B8C]"""
        # 1. [UNICODE_30ED]
        login_response = self.client.post("/auth/token", json={
            "guardian_id": self.test_guardian_id,
            "user_id": self.test_user_id,
            "permission_level": self.test_permission_level.value
        })
        
        assert login_response.status_code == 200
        login_data = login_response.json()
        
        # [UNICODE_30EC]
        assert "access_token" in login_data
        assert "refresh_token" in login_data
        assert "token_type" in login_data
        assert "expires_in" in login_data
        assert "refresh_expires_in" in login_data
        assert login_data["token_type"] == "Bearer"
        
        access_token = login_data["access_token"]
        refresh_token = login_data["refresh_token"]
        
        # 2. [UNICODE_30A2]
        headers = {"Authorization": f"Bearer {access_token}"}
        me_response = self.client.get("/auth/me", headers=headers)
        
        assert me_response.status_code == 200
        me_data = me_response.json()
        assert me_data["guardian_id"] == self.test_guardian_id
        assert me_data["user_id"] == self.test_user_id
        assert me_data["authenticated"] is True
        
        # 3. [UNICODE_30C8]
        token_info_response = self.client.get("/auth/token/info", headers=headers)
        assert token_info_response.status_code == 200
        token_info = token_info_response.json()
        assert token_info["guardian_id"] == self.test_guardian_id
        assert token_info["user_id"] == self.test_user_id
        assert token_info["token_type"] == "access"
        assert token_info["is_expired"] is False
        
        # 4. [UNICODE_30C8]
        refresh_response = self.client.post("/auth/token/refresh", json={
            "refresh_token": refresh_token
        })
        
        assert refresh_response.status_code == 200
        refresh_data = refresh_response.json()
        assert "access_token" in refresh_data
        assert "refresh_token" in refresh_data
        
        new_access_token = refresh_data["access_token"]
        new_refresh_token = refresh_data["refresh_token"]
        
        # [UNICODE_65B0]
        new_headers = {"Authorization": f"Bearer {new_access_token}"}
        new_me_response = self.client.get("/auth/me", headers=new_headers)
        assert new_me_response.status_code == 200
        
        # 5. [UNICODE_30ED]
        logout_response = self.client.post("/auth/token/revoke", 
                                         headers=new_headers,
                                         json={"refresh_token": new_refresh_token})
        
        assert logout_response.status_code == 200
        
        # [UNICODE_53D6]
        revoked_response = self.client.get("/auth/me", headers=new_headers)
        assert revoked_response.status_code == 401
    
    def test_jwt_middleware_validation(self):
        """JWT[UNICODE_30DF]"""
        # 1. [UNICODE_6709]
        token_pair = jwt_service.create_token_pair(
            self.test_guardian_id,
            self.test_user_id,
            self.test_permission_level.value
        )
        
        headers = {"Authorization": f"Bearer {token_pair.access_token}"}
        
        # 2. [UNICODE_8A8D]
        response = self.client.get("/auth/me", headers=headers)
        assert response.status_code == 200
        
        # 3. [UNICODE_7121]
        invalid_headers = {"Authorization": "Bearer invalid_token"}
        invalid_response = self.client.get("/auth/me", headers=invalid_headers)
        assert invalid_response.status_code == 401
        
        # 4. [UNICODE_30C8]
        no_token_response = self.client.get("/auth/me")
        assert no_token_response.status_code == 401
        
        # 5. [UNICODE_4E0D]
        wrong_scheme_headers = {"Authorization": "Basic invalid_token"}
        wrong_scheme_response = self.client.get("/auth/me", headers=wrong_scheme_headers)
        assert wrong_scheme_response.status_code == 401
    
    def test_permission_level_enforcement(self):
        """[UNICODE_6A29]"""
        # 1. view-only[UNICODE_6A29]
        view_only_token = jwt_service.create_access_token(
            self.test_guardian_id,
            self.test_user_id,
            PermissionLevel.VIEW_ONLY.value
        )
        
        # 2. task-edit[UNICODE_6A29]
        task_edit_token = jwt_service.create_access_token(
            self.test_guardian_id,
            self.test_user_id,
            PermissionLevel.TASK_EDIT.value
        )
        
        # 3. chat-send[UNICODE_6A29]
        chat_send_token = jwt_service.create_access_token(
            self.test_guardian_id,
            self.test_user_id,
            PermissionLevel.CHAT_SEND.value
        )
        
        # [UNICODE_5404]
        for token, level in [
            (view_only_token, "view-only"),
            (task_edit_token, "task-edit"),
            (chat_send_token, "chat-send")
        ]:
            headers = {"Authorization": f"Bearer {token}"}
            response = self.client.get("/auth/me", headers=headers)
            assert response.status_code == 200
            data = response.json()
            assert data["permission_level"] == level
    
    def test_token_expiration_handling(self):
        """[UNICODE_30C8]"""
        # 1. [UNICODE_671F]
        expired_token = jwt_service.create_access_token(
            self.test_guardian_id,
            self.test_user_id,
            self.test_permission_level.value
        )
        
        # JWT[UNICODE_30B5]
        original_expire_minutes = jwt_service.access_token_expire_minutes
        jwt_service.access_token_expire_minutes = -1  # [UNICODE_5373]
        
        try:
            expired_token = jwt_service.create_access_token(
                self.test_guardian_id,
                self.test_user_id,
                self.test_permission_level.value
            )
            
            # [UNICODE_671F]
            headers = {"Authorization": f"Bearer {expired_token}"}
            response = self.client.get("/auth/me", headers=headers)
            assert response.status_code == 401
            assert "expired" in response.json()["detail"].lower()
            
        finally:
            # [UNICODE_8A2D]
            jwt_service.access_token_expire_minutes = original_expire_minutes
    
    def test_guardian_authentication_endpoints(self):
        """Guardian[UNICODE_8A8D]"""
        # 1. Guardian [UNICODE_30ED]
        login_response = self.client.post("/auth/guardian/login", json={
            "guardian_id": self.test_guardian_id,
            "user_id": self.test_user_id,
            "permission_level": self.test_permission_level.value
        })
        
        assert login_response.status_code == 200
        login_data = login_response.json()
        assert "access_token" in login_data
        assert login_data["guardian_id"] == self.test_guardian_id
        assert login_data["user_id"] == self.test_user_id
        
        # 2. Guardian [UNICODE_30A2]
        grant_response = self.client.post("/auth/guardian/grant", json={
            "user_id": "new_user_001",
            "guardian_id": self.test_guardian_id,
            "permission_level": PermissionLevel.VIEW_ONLY.value,
            "granted_by": "admin_001"
        })
        
        assert grant_response.status_code == 200
        grant_data = grant_response.json()
        assert grant_data["success"] is True
        
        # 3. Guardian [UNICODE_30A2]
        revoke_response = self.client.post("/auth/guardian/revoke", json={
            "user_id": "new_user_001",
            "guardian_id": self.test_guardian_id
        })
        
        assert revoke_response.status_code == 200
        revoke_data = revoke_response.json()
        assert revoke_data["success"] is True
    
    def test_permission_check_endpoints(self):
        """[UNICODE_6A29]"""
        from shared.interfaces.rbac_system import ResourceType, Action
        
        # [UNICODE_6A29]
        check_response = self.client.post("/auth/permission/check", json={
            "guardian_id": self.test_guardian_id,
            "user_id": self.test_user_id,
            "resource_type": ResourceType.DASHBOARD.value,
            "action": Action.VIEW.value
        })
        
        assert check_response.status_code == 200
        check_data = check_response.json()
        assert "has_permission" in check_data
        assert check_data["guardian_id"] == self.test_guardian_id
        assert check_data["user_id"] == self.test_user_id
    
    def test_error_handling(self):
        """[UNICODE_30A8]"""
        # 1. [UNICODE_4E0D]
        invalid_login_response = self.client.post("/auth/token", json={
            "guardian_id": "",  # [UNICODE_7A7A]ID
            "user_id": self.test_user_id,
            "permission_level": "invalid_level"
        })
        assert invalid_login_response.status_code == 422  # Validation error
        
        # 2. [UNICODE_4E0D]
        invalid_refresh_response = self.client.post("/auth/token/refresh", json={
            "refresh_token": "invalid_refresh_token"
        })
        assert invalid_refresh_response.status_code == 401
        
        # 3. [UNICODE_5B58]
        not_found_response = self.client.get("/auth/nonexistent")
        assert not_found_response.status_code == 404
    
    def test_system_management_endpoints(self):
        """[UNICODE_30B7]"""
        # 1. [UNICODE_30B7]
        roles_response = self.client.get("/auth/system/roles")
        assert roles_response.status_code == 200
        roles_data = roles_response.json()
        assert isinstance(roles_data, dict)
        
        # 2. [UNICODE_671F]
        cleanup_response = self.client.post("/auth/system/cleanup")
        assert cleanup_response.status_code == 200
        cleanup_data = cleanup_response.json()
        assert cleanup_data["success"] is True
        assert "cleaned_count" in cleanup_data
    
    def test_health_check(self):
        """[UNICODE_30D8]"""
        health_response = self.client.get("/health")
        assert health_response.status_code == 200
        health_data = health_response.json()
        assert health_data["status"] == "healthy"
        assert health_data["service"] == "auth"


class TestJWTServiceIntegration:
    """JWT[UNICODE_30B5]"""
    
    def setup_method(self):
        """[UNICODE_30C6]"""
        self.test_guardian_id = "test_guardian_002"
        self.test_user_id = "test_user_002"
        self.test_permission_level = PermissionLevel.CHAT_SEND
    
    def test_token_lifecycle(self):
        """[UNICODE_30C8]"""
        # 1. [UNICODE_30C8]
        token_pair = jwt_service.create_token_pair(
            self.test_guardian_id,
            self.test_user_id,
            self.test_permission_level.value
        )
        
        assert token_pair.access_token
        assert token_pair.refresh_token
        assert token_pair.token_type == "Bearer"
        assert token_pair.expires_in > 0
        assert token_pair.refresh_expires_in > 0
        
        # 2. [UNICODE_30A2]
        access_token_data = jwt_service.verify_token(token_pair.access_token)
        assert access_token_data.guardian_id == self.test_guardian_id
        assert access_token_data.user_id == self.test_user_id
        assert access_token_data.permission_level == self.test_permission_level.value
        assert access_token_data.token_type == TokenType.ACCESS
        
        # 3. [UNICODE_30EA]
        refresh_token_data = jwt_service.verify_token(token_pair.refresh_token)
        assert refresh_token_data.guardian_id == self.test_guardian_id
        assert refresh_token_data.user_id == self.test_user_id
        assert refresh_token_data.permission_level == self.test_permission_level.value
        assert refresh_token_data.token_type == TokenType.REFRESH
        
        # 4. [UNICODE_30C8]
        new_token_pair = jwt_service.refresh_access_token(token_pair.refresh_token)
        assert new_token_pair.access_token != token_pair.access_token
        assert new_token_pair.refresh_token != token_pair.refresh_token
        
        # 5. [UNICODE_30C8]
        revoke_success = jwt_service.revoke_token(new_token_pair.access_token)
        assert revoke_success is True
        
        # [UNICODE_53D6]
        with pytest.raises(HTTPException) as exc_info:
            jwt_service.verify_token(new_token_pair.access_token)
        assert exc_info.value.status_code == 401
    
    def test_token_info_extraction(self):
        """[UNICODE_30C8]"""
        # [UNICODE_30C8]
        access_token = jwt_service.create_access_token(
            self.test_guardian_id,
            self.test_user_id,
            self.test_permission_level.value,
            {"custom_claim": "test_value"}
        )
        
        # [UNICODE_30C8]
        token_info = jwt_service.get_token_info(access_token)
        
        assert token_info["guardian_id"] == self.test_guardian_id
        assert token_info["user_id"] == self.test_user_id
        assert token_info["permission_level"] == self.test_permission_level.value
        assert token_info["token_type"] == "access"
        assert token_info["is_expired"] is False
        assert token_info["is_revoked"] is False
        assert "jti" in token_info
        assert "issued_at" in token_info
        assert "expires_at" in token_info


class TestAuthMiddlewareIntegration:
    """[UNICODE_8A8D]"""
    
    def setup_method(self):
        """[UNICODE_30C6]"""
        self.test_guardian_id = "test_guardian_003"
        self.test_user_id = "test_user_003"
        self.test_permission_level = PermissionLevel.TASK_EDIT
    
    @pytest.mark.asyncio
    async def test_authentication_service_integration(self):
        """[UNICODE_8A8D]"""
        # 1. [UNICODE_8A8D]
        auth_result = await auth_service.authenticate_and_authorize(
            self.test_guardian_id,
            self.test_user_id,
            self.test_permission_level
        )
        
        assert auth_result["authorized"] is True
        assert "authentication" in auth_result
        assert "tokens" in auth_result
        
        tokens = auth_result["tokens"]
        assert "access_token" in tokens
        assert "refresh_token" in tokens
        
        # 2. [UNICODE_8A8D]
        refresh_result = await auth_service.refresh_authentication(
            tokens["refresh_token"]
        )
        
        assert "tokens" in refresh_result
        assert refresh_result["guardian_id"] == self.test_guardian_id
        assert refresh_result["user_id"] == self.test_user_id
        
        # 3. [UNICODE_30ED]
        logout_result = await auth_service.logout(
            refresh_result["tokens"]["access_token"],
            refresh_result["tokens"]["refresh_token"]
        )
        
        assert logout_result["success"] is True
        assert logout_result["revoked_tokens"] >= 0


def run_integration_tests():
    """[UNICODE_7D71]"""
    print("=== [UNICODE_8A8D] ===")
    
    # [UNICODE_30C6]
    test_classes = [
        TestAuthFlowIntegration,
        TestJWTServiceIntegration,
        TestAuthMiddlewareIntegration
    ]
    
    total_tests = 0
    passed_tests = 0
    
    for test_class in test_classes:
        print(f"\n--- {test_class.__name__} ---")
        test_instance = test_class()
        
        # [UNICODE_30C6]
        test_methods = [method for method in dir(test_instance) 
                       if method.startswith('test_')]
        
        for test_method_name in test_methods:
            total_tests += 1
            try:
                # [UNICODE_30BB]
                if hasattr(test_instance, 'setup_method'):
                    test_instance.setup_method()
                
                # [UNICODE_30C6]
                test_method = getattr(test_instance, test_method_name)
                if asyncio.iscoroutinefunction(test_method):
                    asyncio.run(test_method())
                else:
                    test_method()
                
                print(f"[UNICODE_2713] {test_method_name}")
                passed_tests += 1
                
            except Exception as e:
                print(f"[UNICODE_2717] {test_method_name}: {str(e)}")
    
    print(f"\n=== [UNICODE_30C6]: {passed_tests}/{total_tests} [UNICODE_6210] ===")
    return passed_tests == total_tests


if __name__ == "__main__":
    success = run_integration_tests()
    exit(0 if success else 1)