"""
Pomodoro[UNICODE_7D71]

Requirements: 3.2, 5.3
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta

# [UNICODE_30D7]
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from pomodoro_integration import (
    PomodoroIntegrationService, PomodoroSessionStatus, BreakType,
    WorkSession, ADHDSupportMetrics
)
from shared.interfaces.task_system import (
    Task, TaskType, TaskDifficulty, TaskStatus, ADHDSupportLevel,
    TaskXPCalculator
)


def validate_requirements():
    """[UNICODE_8981]3.2[UNICODE_3068]5.3[UNICODE_306E]"""
    print("[UNICODE_1F50D] [UNICODE_8981]")
    print("=" * 50)
    
    # [UNICODE_8981]3.2: 60[UNICODE_5206]
    print("[UNICODE_1F4CB] [UNICODE_8981]3.2: 60[UNICODE_5206]")
    req_3_2_checks = [
        "[UNICODE_2713] [UNICODE_9023]",
        "[UNICODE_2713] 60[UNICODE_5206]",
        "[UNICODE_2713] [UNICODE_4F11]",
        "[UNICODE_2713] 2[UNICODE_56DE]",
        "[UNICODE_2713] [UNICODE_5F37]"
    ]
    
    for check in req_3_2_checks:
        print(f"  {check}")
    
    # [UNICODE_8981]5.3: Pomodoro[UNICODE_4F7F]ADHD[UNICODE_652F]
    print("\n[UNICODE_1F4CB] [UNICODE_8981]5.3: Pomodoro[UNICODE_4F7F]ADHD[UNICODE_652F]")
    req_5_3_checks = [
        "[UNICODE_2713] Pomodoro[UNICODE_30BB]",
        "[UNICODE_2713] [UNICODE_6210]",
        "[UNICODE_2713] [UNICODE_4F11]",
        "[UNICODE_2713] 1.0-1.3[UNICODE_7BC4]",
        "[UNICODE_2713] XP[UNICODE_8A08]"
    ]
    
    for check in req_5_3_checks:
        print(f"  {check}")
    
    print("\n[UNICODE_2705] [UNICODE_8981]")


async def validate_implementation():
    """[UNICODE_5B9F]"""
    print("\n[UNICODE_1F527] [UNICODE_5B9F]")
    print("=" * 50)
    
    service = PomodoroIntegrationService()
    uid = "validation_user"
    task_id = "validation_task"
    
    validation_results = []
    
    # 1. Pomodoro[UNICODE_30BB]
    print("1. Pomodoro[UNICODE_30BB]...")
    try:
        session = await service.start_pomodoro_session(uid, task_id, 25, True)
        assert session.status == PomodoroSessionStatus.ACTIVE
        assert session.planned_duration == 25
        assert session.focus_music_enabled is True
        
        completed = await service.complete_pomodoro_session(session.session_id, 23, "[UNICODE_30C6]")
        assert completed.status == PomodoroSessionStatus.COMPLETED
        assert completed.actual_duration == 23
        
        print("   [UNICODE_2705] Pomodoro[UNICODE_30BB]: [UNICODE_6B63]")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] Pomodoro[UNICODE_30BB]: [UNICODE_5931] - {e}")
        validation_results.append(False)
    
    # 2. ADHD[UNICODE_652F]
    print("2. ADHD[UNICODE_652F]...")
    try:
        # [UNICODE_521D]
        initial_multiplier = service.calculate_adhd_assist_multiplier(uid)
        assert initial_multiplier >= 1.0
        
        # [UNICODE_30E1]
        service.adhd_metrics[uid] = ADHDSupportMetrics(
            uid=uid,
            total_pomodoro_sessions=15,
            successful_sessions=13,
            usage_frequency_score=0.7,
            break_compliance_rate=0.8
        )
        
        enhanced_multiplier = service.calculate_adhd_assist_multiplier(uid)
        assert enhanced_multiplier > initial_multiplier
        assert 1.0 <= enhanced_multiplier <= 1.3
        
        print(f"   [UNICODE_2705] ADHD[UNICODE_652F]: [UNICODE_6B63] ({initial_multiplier:.2f} [UNICODE_2192] {enhanced_multiplier:.2f})")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] ADHD[UNICODE_652F]: [UNICODE_5931] - {e}")
        validation_results.append(False)
    
    # 3. [UNICODE_9023]
    print("3. [UNICODE_9023]...")
    try:
        # 60[UNICODE_5206]
        past_time = datetime.utcnow() - timedelta(minutes=65)
        service.work_sessions[uid] = WorkSession(
            uid=uid,
            start_time=past_time,
            is_active=True
        )
        
        work_check = await service.check_continuous_work_time(uid)
        assert work_check["continuous_minutes"] >= 60
        assert work_check["needs_break"] is True
        assert work_check["break_suggestion"] is not None
        
        print(f"   [UNICODE_2705] [UNICODE_9023]: [UNICODE_6B63] ({work_check['continuous_minutes']}[UNICODE_5206])")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] [UNICODE_9023]: [UNICODE_5931] - {e}")
        validation_results.append(False)
    
    # 4. [UNICODE_4F11]
    print("4. [UNICODE_4F11]...")
    try:
        # 1[UNICODE_56DE]
        refusal1 = await service.handle_break_refusal(uid)
        assert refusal1["refusal_count"] == 1
        assert refusal1["show_mother_concern"] is False
        
        # 2[UNICODE_56DE]
        refusal2 = await service.handle_break_refusal(uid)
        assert refusal2["refusal_count"] == 2
        assert refusal2["show_mother_concern"] is True
        assert refusal2["mandatory_break_required"] is True
        assert "[UNICODE_304A]" in refusal2["narrative"]
        
        print("   [UNICODE_2705] [UNICODE_4F11]: [UNICODE_6B63]")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] [UNICODE_4F11]: [UNICODE_5931] - {e}")
        validation_results.append(False)
    
    # 5. [UNICODE_4F11]
    print("5. [UNICODE_4F11]...")
    try:
        session2 = await service.start_pomodoro_session(uid, task_id)
        await service.complete_pomodoro_session(session2.session_id)
        
        # [UNICODE_77ED]
        short_break = await service.start_break(session2.session_id, BreakType.SHORT)
        assert short_break.status == PomodoroSessionStatus.BREAK
        assert short_break.break_type == BreakType.SHORT
        assert short_break.break_duration == 5
        
        # [UNICODE_5F37]
        session3 = await service.start_pomodoro_session(uid, task_id)
        await service.complete_pomodoro_session(session3.session_id)
        
        mandatory_break = await service.start_break(session3.session_id, BreakType.MANDATORY)
        assert mandatory_break.break_type == BreakType.MANDATORY
        assert mandatory_break.break_duration == 15
        
        print("   [UNICODE_2705] [UNICODE_4F11]: [UNICODE_6B63]")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] [UNICODE_4F11]: [UNICODE_5931] - {e}")
        validation_results.append(False)
    
    # 6. XP[UNICODE_8A08]
    print("6. XP[UNICODE_8A08]...")
    try:
        # [UNICODE_30C6]
        task = Task(
            task_id="test_task_xp",
            uid=uid,
            task_type=TaskType.ROUTINE,
            title="XP[UNICODE_7D71]",
            difficulty=TaskDifficulty.MEDIUM,
            adhd_support_level=ADHDSupportLevel.BASIC
        )
        
        # ADHD[UNICODE_652F]
        adhd_multiplier = service.calculate_adhd_assist_multiplier(uid)
        
        # XP[UNICODE_8A08]
        xp_result = TaskXPCalculator.calculate_detailed_xp(
            task, mood_score=4, actual_duration=25, external_adhd_multiplier=adhd_multiplier
        )
        
        assert xp_result.adhd_assist_multiplier >= 1.0  # [UNICODE_6700]1.0[UNICODE_4EE5]
        assert xp_result.final_xp > 0
        # Pomodoro[UNICODE_7D71]
        assert adhd_multiplier is not None and adhd_multiplier > 1.0
        
        print(f"   [UNICODE_2705] XP[UNICODE_8A08]: [UNICODE_6B63]: {xp_result.adhd_assist_multiplier:.2f}, XP: {xp_result.final_xp}[UNICODE_FF09]")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] XP[UNICODE_8A08]: [UNICODE_5931] - {e}")
        import traceback
        traceback.print_exc()
        validation_results.append(False)
    
    # 7. [UNICODE_7D71]
    print("7. [UNICODE_7D71]...")
    try:
        stats = await service.get_user_pomodoro_statistics(uid, 30)
        assert "total_sessions" in stats
        assert "completed_sessions" in stats
        assert "adhd_assist_multiplier" in stats
        assert "usage_frequency_score" in stats
        assert stats["total_sessions"] > 0
        
        print(f"   [UNICODE_2705] [UNICODE_7D71]: [UNICODE_6B63]{stats['total_sessions']}[UNICODE_30BB]")
        validation_results.append(True)
    except Exception as e:
        print(f"   [UNICODE_274C] [UNICODE_7D71]: [UNICODE_5931] - {e}")
        validation_results.append(False)
    
    return validation_results


def validate_api_structure():
    """API[UNICODE_69CB]"""
    print("\n[UNICODE_1F310] API[UNICODE_69CB]")
    print("=" * 50)
    
    # main.py[UNICODE_30D5]Pomodoro[UNICODE_95A2]
    try:
        with open("main.py", "r", encoding="utf-8") as f:
            main_content = f.read()
        
        # Pomodoro[UNICODE_95A2]
        expected_patterns = [
            "/pomodoro/start",
            "/pomodoro/{session_id}/complete",
            "/pomodoro/{session_id}/break/start",
            "/work-time-check",
            "/break-refusal",
            "/pomodoro/statistics",
            "/adhd-assist-multiplier"
        ]
        
        found_patterns = []
        for pattern in expected_patterns:
            if pattern in main_content:
                found_patterns.append(pattern)
        
        print(f"[UNICODE_5B9F]Pomodoro[UNICODE_30A8]: {len(found_patterns)}/{len(expected_patterns)}")
        for pattern in found_patterns:
            print(f"  [UNICODE_2713] {pattern}")
        
        # Pomodoro[UNICODE_7D71]
        pomodoro_imports = [
            "from .pomodoro_integration import",
            "pomodoro_service",
            "PomodoroSession"
        ]
        
        import_found = sum(1 for imp in pomodoro_imports if imp in main_content)
        print(f"Pomodoro[UNICODE_7D71]: {import_found}/{len(pomodoro_imports)}")
        
        return len(found_patterns) >= 5  # [UNICODE_6700]5[UNICODE_3064]
        
    except Exception as e:
        print(f"[UNICODE_274C] API[UNICODE_69CB]: {e}")
        return False


async def main():
    """[UNICODE_30E1]"""
    print("[UNICODE_1F680] Pomodoro[UNICODE_7D71]ADHD[UNICODE_652F]")
    print("=" * 60)
    
    # [UNICODE_8981]
    validate_requirements()
    
    # [UNICODE_5B9F]
    implementation_results = await validate_implementation()
    
    # API[UNICODE_69CB]
    api_valid = validate_api_structure()
    
    # [UNICODE_7D50]
    print("\n" + "=" * 60)
    print("[UNICODE_1F4CA] [UNICODE_691C]")
    
    implementation_success = sum(implementation_results)
    implementation_total = len(implementation_results)
    
    print(f"[UNICODE_5B9F]: {implementation_success}/{implementation_total}")
    print(f"API[UNICODE_69CB]: {'[UNICODE_2705]' if api_valid else '[UNICODE_274C]'}")
    
    overall_success = implementation_success == implementation_total and api_valid
    
    if overall_success:
        print("\n[UNICODE_1F389] [UNICODE_30BF]6.2[UNICODE_300C]Pomodoro[UNICODE_7D71]ADHD[UNICODE_652F]")
        print("\n[UNICODE_5B9F]:")
        print("[UNICODE_2705] Pomodoro[UNICODE_30BB]")
        print("[UNICODE_2705] ADHD[UNICODE_652F]")
        print("[UNICODE_2705] 60[UNICODE_5206]")
        print("[UNICODE_2705] 2[UNICODE_56DE]")
        print("[UNICODE_2705] [UNICODE_4F11]")
        print("[UNICODE_2705] [UNICODE_9023]")
        print("[UNICODE_2705] XP[UNICODE_8A08]")
        print("[UNICODE_2705] [UNICODE_7D71]")
        print("[UNICODE_2705] RESTful API[UNICODE_30A8]")
        print("[UNICODE_2705] [UNICODE_5358]")
        
        print("\n[UNICODE_1F4CB] [UNICODE_8981]:")
        print("[UNICODE_2705] [UNICODE_8981]3.2: 60[UNICODE_5206]")
        print("[UNICODE_2705] [UNICODE_8981]5.3: Pomodoro[UNICODE_4F7F]ADHD[UNICODE_652F]")
        
        return True
    else:
        print("\n[UNICODE_274C] [UNICODE_4E00]")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)