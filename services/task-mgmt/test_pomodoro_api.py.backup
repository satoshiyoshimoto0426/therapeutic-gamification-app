"""
Pomodoro[UNICODE_7D71]API[UNICODE_30A8]

Requirements: 3.2, 5.3
"""

import sys
import os
import asyncio
import json
from datetime import datetime, timedelta

# [UNICODE_30D7]
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from fastapi.testclient import TestClient
from main import app
from shared.interfaces.task_system import Task, TaskType, TaskDifficulty, TaskStatus


def test_pomodoro_api_endpoints():
    """Pomodoro API [UNICODE_30A8]"""
    print("=== Pomodoro API [UNICODE_30A8] ===")
    
    client = TestClient(app)
    uid = "test_user_api"
    
    try:
        # 1. [UNICODE_30BF]
        print("1. [UNICODE_30C6]...")
        task_data = {
            "task_type": "routine",
            "title": "Pomodoro[UNICODE_30C6]",
            "description": "API[UNICODE_7D71]",
            "difficulty": 3,
            "priority": "medium",
            "estimated_duration": 25,
            "adhd_support_level": "basic",
            "pomodoro_sessions_planned": 2,
            "break_reminders_enabled": True,
            "focus_music_enabled": True
        }
        
        response = client.post(f"/tasks/{uid}/create", json=task_data)
        assert response.status_code == 200
        task = response.json()
        task_id = task["task_id"]
        print(f"   [UNICODE_2713] [UNICODE_30BF]: {task_id}")
        
        # 2. Pomodoro[UNICODE_30BB]
        print("2. Pomodoro[UNICODE_30BB]...")
        pomodoro_data = {
            "duration": 25,
            "focus_music_enabled": True
        }
        
        response = client.post(f"/tasks/{uid}/{task_id}/pomodoro/start", json=pomodoro_data)
        assert response.status_code == 200
        session = response.json()
        session_id = session["session_id"]
        assert session["status"] == "active"
        assert session["planned_duration"] == 25
        assert session["focus_music_enabled"] is True
        print(f"   [UNICODE_2713] Pomodoro[UNICODE_30BB]: {session_id}")
        
        # 3. Pomodoro[UNICODE_30BB]
        print("3. Pomodoro[UNICODE_30BB]...")
        complete_data = {
            "actual_duration": 23,
            "notes": "API[UNICODE_30C6]"
        }
        
        response = client.post(f"/tasks/{uid}/pomodoro/{session_id}/complete", json=complete_data)
        assert response.status_code == 200
        result = response.json()
        assert result["success"] is True
        assert result["session"]["status"] == "completed"
        assert result["session"]["actual_duration"] == 23
        assert "adhd_assist_multiplier" in result
        print(f"   [UNICODE_2713] Pomodoro[UNICODE_30BB]")
        print(f"   [UNICODE_2713] ADHD[UNICODE_652F]: {result['adhd_assist_multiplier']}")
        
        # 4. [UNICODE_9023]
        print("4. [UNICODE_9023]...")
        response = client.get(f"/tasks/{uid}/work-time-check")
        assert response.status_code == 200
        work_check = response.json()
        assert "continuous_minutes" in work_check
        assert "needs_break" in work_check
        print(f"   [UNICODE_2713] [UNICODE_9023]: {work_check['continuous_minutes']}[UNICODE_5206]")
        
        # 5. ADHD[UNICODE_652F]
        print("5. ADHD[UNICODE_652F]...")
        response = client.get(f"/tasks/{uid}/adhd-assist-multiplier")
        assert response.status_code == 200
        adhd_info = response.json()
        assert "adhd_assist_multiplier" in adhd_info
        assert 1.0 <= adhd_info["adhd_assist_multiplier"] <= 1.3
        print(f"   [UNICODE_2713] ADHD[UNICODE_652F]: {adhd_info['adhd_assist_multiplier']}")
        
        # 6. Pomodoro[UNICODE_7D71]
        print("6. Pomodoro[UNICODE_7D71]...")
        response = client.get(f"/tasks/{uid}/pomodoro/statistics?days=30")
        assert response.status_code == 200
        stats = response.json()
        assert stats["total_sessions"] >= 1
        assert stats["completed_sessions"] >= 1
        assert "adhd_assist_multiplier" in stats
        print(f"   [UNICODE_2713] [UNICODE_7D71]: {stats['total_sessions']}[UNICODE_30BB]")
        
        # 7. [UNICODE_30BF]Pomodoro[UNICODE_7D71]
        print("7. [UNICODE_30BF]Pomodoro[UNICODE_7D71]...")
        complete_task_data = {
            "mood_score": 4,
            "actual_duration": 23,
            "notes": "Pomodoro[UNICODE_7D71]",
            "pomodoro_sessions_completed": 1
        }
        
        response = client.post(f"/tasks/{uid}/{task_id}/complete", json=complete_task_data)
        assert response.status_code == 200
        task_result = response.json()
        assert task_result["success"] is True
        assert "pomodoro_integration" in task_result
        assert task_result["pomodoro_integration"]["sessions_completed"] == 1
        assert task_result["pomodoro_integration"]["adhd_assist_multiplier"] > 1.0
        print("   [UNICODE_2713] [UNICODE_30BF]Pomodoro[UNICODE_7D71]")
        
        print("[UNICODE_2705] Pomodoro API [UNICODE_30A8]")
        return True
        
    except Exception as e:
        print(f"[UNICODE_274C] Pomodoro API [UNICODE_30A8]: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


def test_break_management_api():
    """[UNICODE_4F11]API[UNICODE_306E]"""
    print("\n=== [UNICODE_4F11]API[UNICODE_30C6] ===")
    
    client = TestClient(app)
    uid = "test_user_break_api"
    
    try:
        # [UNICODE_30BF]
        print("1. [UNICODE_30C6]...")
        task_data = {
            "task_type": "one_shot",
            "title": "[UNICODE_4F11]",
            "difficulty": 2
        }
        
        response = client.post(f"/tasks/{uid}/create", json=task_data)
        task_id = response.json()["task_id"]
        
        # Pomodoro[UNICODE_30BB]
        print("2. Pomodoro[UNICODE_30BB]...")
        response = client.post(f"/tasks/{uid}/{task_id}/pomodoro/start", json={"duration": 25})
        session_id = response.json()["session_id"]
        
        # [UNICODE_30BB]
        print("3. [UNICODE_30BB]...")
        response = client.post(f"/tasks/{uid}/pomodoro/{session_id}/complete", json={})
        assert response.status_code == 200
        
        # [UNICODE_77ED]
        print("4. [UNICODE_77ED]...")
        response = client.post(f"/tasks/{uid}/pomodoro/{session_id}/break/start", json="short")
        assert response.status_code == 200
        break_session = response.json()
        assert break_session["status"] == "break"
        assert break_session["break_type"] == "short"
        assert break_session["break_duration"] == 5
        print("   [UNICODE_2713] [UNICODE_77ED]")
        
        # [UNICODE_4F11]
        print("5. [UNICODE_4F11]...")
        response = client.post(f"/tasks/{uid}/pomodoro/{session_id}/break/complete")
        assert response.status_code == 200
        completed_break = response.json()
        assert completed_break["status"] == "completed"
        print("   [UNICODE_2713] [UNICODE_4F11]")
        
        print("[UNICODE_2705] [UNICODE_4F11]API[UNICODE_30C6]")
        return True
        
    except Exception as e:
        print(f"[UNICODE_274C] [UNICODE_4F11]API[UNICODE_30C6]: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


def test_continuous_work_monitoring_api():
    """[UNICODE_9023]API[UNICODE_306E]3.2[UNICODE_FF09]"""
    print("\n=== [UNICODE_9023]API[UNICODE_30C6] ===")
    
    client = TestClient(app)
    uid = "test_user_continuous"
    
    try:
        # [UNICODE_521D]
        print("1. [UNICODE_521D]...")
        response = client.get(f"/tasks/{uid}/work-time-check")
        assert response.status_code == 200
        initial_check = response.json()
        assert initial_check["continuous_minutes"] == 0
        assert initial_check["needs_break"] is False
        print("   [UNICODE_2713] [UNICODE_521D]")
        
        # [UNICODE_4F11]
        print("2. [UNICODE_4F11]...")
        response = client.post(f"/tasks/{uid}/break-refusal")
        assert response.status_code == 200
        refusal_result = response.json()
        assert "error" in refusal_result
        print("   [UNICODE_2713] [UNICODE_30BB]")
        
        print("[UNICODE_2705] [UNICODE_9023]API[UNICODE_30C6]")
        return True
        
    except Exception as e:
        print(f"[UNICODE_274C] [UNICODE_9023]API[UNICODE_30C6]: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """[UNICODE_30E1]"""
    print("[UNICODE_1F680] Pomodoro[UNICODE_7D71]API[UNICODE_30C6]")
    print("=" * 50)
    
    tests = [
        test_pomodoro_api_endpoints,
        test_break_management_api,
        test_continuous_work_monitoring_api
    ]
    
    results = []
    for test in tests:
        result = test()
        results.append(result)
    
    print("\n" + "=" * 50)
    print("[UNICODE_1F4CA] API[UNICODE_30C6]")
    print(f"[UNICODE_6210]: {sum(results)}/{len(results)}")
    
    if all(results):
        print("[UNICODE_1F389] [UNICODE_5168]API[UNICODE_30C6]")
        print("\n[UNICODE_5B9F]API[UNICODE_30A8]:")
        print("[UNICODE_2713] POST /tasks/{uid}/{task_id}/pomodoro/start")
        print("[UNICODE_2713] POST /tasks/{uid}/pomodoro/{session_id}/complete")
        print("[UNICODE_2713] POST /tasks/{uid}/pomodoro/{session_id}/break/start")
        print("[UNICODE_2713] POST /tasks/{uid}/pomodoro/{session_id}/break/complete")
        print("[UNICODE_2713] POST /tasks/{uid}/pomodoro/{session_id}/cancel")
        print("[UNICODE_2713] GET /tasks/{uid}/work-time-check")
        print("[UNICODE_2713] POST /tasks/{uid}/break-refusal")
        print("[UNICODE_2713] GET /tasks/{uid}/pomodoro/statistics")
        print("[UNICODE_2713] GET /tasks/{uid}/adhd-assist-multiplier")
        return True
    else:
        print("[UNICODE_274C] [UNICODE_4E00]API[UNICODE_30C6]")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)