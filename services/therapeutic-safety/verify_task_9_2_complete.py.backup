#!/usr/bin/env python3
"""
Task 9.2: CBT[UNICODE_30D9]
[UNICODE_8981]7.2[UNICODE_306E]
"""

import sys
import os

# [UNICODE_30D1]
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

from main import CBTInterventionEngine, TherapeuticSafetyService

def verify_negative_pattern_detection():
    """[UNICODE_5426]"""
    print("1. [UNICODE_5426]...")
    
    cbt_engine = CBTInterventionEngine()
    
    # [UNICODE_5FC5]
    required_distortions = [
        "all_or_nothing",
        "catastrophizing", 
        "personalization",
        "mind_reading",
        "emotional_reasoning"
    ]
    
    implemented_distortions = list(cbt_engine.cognitive_distortions.keys())
    
    for distortion in required_distortions:
        if distortion in implemented_distortions:
            print(f"  [UNICODE_2705] {distortion} - [UNICODE_5B9F]")
        else:
            print(f"  [UNICODE_274C] {distortion} - [UNICODE_672A]")
            return False
    
    # [UNICODE_30D1]
    test_content = "[UNICODE_3044]"
    patterns = cbt_engine.detect_negative_thought_patterns(test_content)
    
    if len(patterns) > 0:
        print(f"  [UNICODE_2705] [UNICODE_30D1] - [UNICODE_52D5] ({len(patterns)}[UNICODE_500B])")
        return True
    else:
        print("  [UNICODE_274C] [UNICODE_30D1] - [UNICODE_52D5]")
        return False

def verify_story_break_dialog():
    """[UNICODE_30B9]"""
    print("2. [UNICODE_30B9]...")
    
    cbt_engine = CBTInterventionEngine()
    
    # [UNICODE_5FC5]
    required_templates = [
        "gentle_interruption",
        "cognitive_challenge",
        "reframing_support",
        "encouragement"
    ]
    
    implemented_templates = list(cbt_engine.story_break_templates.keys())
    
    for template in required_templates:
        if template in implemented_templates:
            print(f"  [UNICODE_2705] {template} - [UNICODE_5B9F]")
        else:
            print(f"  [UNICODE_274C] {template} - [UNICODE_672A]")
            return False
    
    # [UNICODE_30C0]
    test_patterns = [{
        "type": "all_or_nothing",
        "name": "[UNICODE_5168]",
        "confidence": 0.8,
        "severity": "high"
    }]
    
    user_context = {"character_name": "[UNICODE_30E6]", "recent_mood": 2}
    story_break = cbt_engine.generate_story_break_dialog(test_patterns, user_context)
    
    if story_break["intervention_needed"] and story_break["dialog"]:
        print(f"  [UNICODE_2705] [UNICODE_30C0] - [UNICODE_52D5]")
        return True
    else:
        print("  [UNICODE_274C] [UNICODE_30C0] - [UNICODE_52D5]")
        return False

def verify_cognitive_reframing():
    """[UNICODE_8A8D]"""
    print("3. [UNICODE_8A8D]...")
    
    cbt_engine = CBTInterventionEngine()
    
    # [UNICODE_5FC5]
    required_techniques = [
        "all_or_nothing",
        "catastrophizing",
        "personalization", 
        "mind_reading",
        "emotional_reasoning"
    ]
    
    implemented_techniques = list(cbt_engine.reframing_techniques.keys())
    
    for technique in required_techniques:
        if technique in implemented_techniques:
            print(f"  [UNICODE_2705] {technique} - [UNICODE_5B9F]")
        else:
            print(f"  [UNICODE_274C] {technique} - [UNICODE_672A]")
            return False
    
    # [UNICODE_8A8D]
    test_thought = "[UNICODE_3044]"
    reframing = cbt_engine.generate_cognitive_reframing(test_thought, "all_or_nothing")
    
    if (reframing["reframed_thoughts"] and 
        reframing["reflection_questions"] and
        reframing["technique"]):
        print(f"  [UNICODE_2705] [UNICODE_8A8D] - [UNICODE_52D5]")
        return True
    else:
        print("  [UNICODE_274C] [UNICODE_8A8D] - [UNICODE_52D5]")
        return False

def verify_integration_functionality():
    """CBT[UNICODE_4ECB]"""
    print("4. CBT[UNICODE_4ECB]...")
    
    cbt_engine = CBTInterventionEngine()
    
    # [UNICODE_7D71]
    test_content = "[UNICODE_3044]"
    user_context = {"character_name": "[UNICODE_30E6]", "recent_mood": 2}
    
    intervention = cbt_engine.create_cbt_intervention(test_content, user_context)
    
    required_keys = [
        "detected_patterns",
        "story_break_dialog", 
        "cognitive_reframing",
        "intervention_recommended",
        "severity"
    ]
    
    for key in required_keys:
        if key in intervention:
            print(f"  [UNICODE_2705] {key} - [UNICODE_5B9F]")
        else:
            print(f"  [UNICODE_274C] {key} - [UNICODE_672A]")
            return False
    
    # [UNICODE_6CBB]
    therapeutic_response = cbt_engine.generate_therapeutic_response(test_content, user_context)
    
    if (therapeutic_response["response_type"] and 
        therapeutic_response["message"] and
        "intervention_needed" in therapeutic_response):
        print(f"  [UNICODE_2705] [UNICODE_6CBB] - [UNICODE_52D5]")
        return True
    else:
        print("  [UNICODE_274C] [UNICODE_6CBB] - [UNICODE_52D5]")
        return False

def verify_comprehensive_safety_service():
    """[UNICODE_5305]"""
    print("5. [UNICODE_5305]...")
    
    safety_service = TherapeuticSafetyService()
    
    # [UNICODE_5FC5]
    if hasattr(safety_service, 'content_moderation'):
        print("  [UNICODE_2705] [UNICODE_30B3] - [UNICODE_7D71]")
    else:
        print("  [UNICODE_274C] [UNICODE_30B3] - [UNICODE_672A]")
        return False
    
    if hasattr(safety_service, 'cbt_intervention'):
        print("  [UNICODE_2705] CBT[UNICODE_4ECB] - [UNICODE_7D71]")
    else:
        print("  [UNICODE_274C] CBT[UNICODE_4ECB] - [UNICODE_672A]")
        return False
    
    # comprehensive_safety_analysis [UNICODE_30E1]
    if hasattr(safety_service, 'comprehensive_safety_analysis'):
        print("  [UNICODE_2705] [UNICODE_5305] - [UNICODE_5B9F]")
        return True
    else:
        print("  [UNICODE_274C] [UNICODE_5305] - [UNICODE_672A]")
        return False

def main():
    """Task 9.2[UNICODE_306E]"""
    print("=== Task 9.2: CBT[UNICODE_30D9] ===")
    print("[UNICODE_8981]7.2: [UNICODE_5426]")
    print()
    
    verification_results = []
    
    # [UNICODE_5404]
    verification_results.append(verify_negative_pattern_detection())
    verification_results.append(verify_story_break_dialog())
    verification_results.append(verify_cognitive_reframing())
    verification_results.append(verify_integration_functionality())
    verification_results.append(verify_comprehensive_safety_service())
    
    print()
    print("=== [UNICODE_691C] ===")
    
    passed = sum(verification_results)
    total = len(verification_results)
    
    print(f"[UNICODE_691C]: {total}")
    print(f"[UNICODE_6210]: {passed}")
    print(f"[UNICODE_5931]: {total - passed}")
    print(f"[UNICODE_6210]: {passed/total*100:.1f}%")
    
    if passed == total:
        print()
        print("[UNICODE_1F389] Task 9.2: CBT[UNICODE_30D9]")
        print()
        print("[UNICODE_5B9F]:")
        print("[UNICODE_2022] [UNICODE_5426] (5[UNICODE_7A2E])")
        print("[UNICODE_2022] [UNICODE_6587]")
        print("[UNICODE_2022] CBT[UNICODE_6280]")
        print("[UNICODE_2022] [UNICODE_5305]")
        print("[UNICODE_2022] [UNICODE_4ECB]")
        print()
        print("[UNICODE_8981]7.2[UNICODE_306E]")
        return True
    else:
        print()
        print("[UNICODE_26A0]  [UNICODE_4E00]")
        print("[UNICODE_5B9F]")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)