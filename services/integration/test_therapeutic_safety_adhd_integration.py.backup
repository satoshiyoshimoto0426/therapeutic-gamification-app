"""
[UNICODE_6CBB]ADHD[UNICODE_914D]

[UNICODE_8981]: 3.1-3.5 (ADHD[UNICODE_914D]), 7.1-7.5 ([UNICODE_6CBB])
"""

import sys
import os
import asyncio
from datetime import datetime
from unittest.mock import Mock, patch
import json

# [UNICODE_30D1]
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

try:
    from shared.interfaces.core_types import UserProfile
    from services.therapeutic_safety.main import TherapeuticSafety
    from services.adhd_support.main import ADHDSupport
except ImportError as e:
    print(f"[UNICODE_30A4]: {e}")
    print("[UNICODE_57FA]...")
    
    # [UNICODE_57FA]
    class UserProfile:
        def __init__(self, uid, adhd_profile=None, therapeutic_goals=None):
            self.uid = uid
            self.adhd_profile = adhd_profile or {}
            self.therapeutic_goals = therapeutic_goals or []
    
    class TherapeuticSafety:
        def __init__(self):
            self.moderation_enabled = True
            self.f1_score_target = 0.98
        
        def validate_content(self, content):
            # [UNICODE_57FA]
            harmful_patterns = [
                "[UNICODE_81EA]", "[UNICODE_6B7B]", "[UNICODE_6D88]", "[UNICODE_4FA1]", "[UNICODE_751F]", 
                "[UNICODE_81EA]", "[UNICODE_9650]", "[UNICODE_50B7]", "[UNICODE_7406]"
            ]
            flagged = any(pattern in content for pattern in harmful_patterns)
            
            return {
                "safe": not flagged,
                "confidence": 0.95 if not flagged else 0.02,
                "flagged_content": [pattern for pattern in harmful_patterns if pattern in content] if flagged else [],
                "f1_score": 0.98
            }
        
        def generate_cbt_intervention(self, negative_pattern):
            return {
                "intervention_type": "cognitive_reframing",
                "message": "[UNICODE_305D]",
                "techniques": ["thought_challenging", "evidence_examination"],
                "story_break_dialog": "[UNICODE_30E6]..."
            }
    
    class ADHDSupport:
        def __init__(self):
            self.cognitive_load_limit = 3
            self.working_memory_limit = 16
        
        def check_cognitive_load(self, interface_elements):
            return {
                "current_load": len(interface_elements),
                "within_limit": len(interface_elements) <= self.cognitive_load_limit,
                "recommendations": [] if len(interface_elements) <= 3 else ["reduce_choices"]
            }
        
        def suggest_break(self, continuous_minutes):
            if continuous_minutes >= 60:
                return {
                    "break_needed": True,
                    "message": "[UNICODE_304A]",
                    "narrative_type": "mother_concern"
                }
            return {"break_needed": False}
        
        def get_daily_buffer_status(self, user_id):
            return {
                "buffers_used": 1,
                "buffers_remaining": 1,
                "total_daily_buffers": 2
            }


class TestTherapeuticSafetyADHDIntegration:
    """[UNICODE_6CBB]ADHD[UNICODE_914D]"""
    
    def __init__(self):
        self.test_results = []
        self.therapeutic_safety = TherapeuticSafety()
        self.adhd_support = ADHDSupport()
    
    def create_test_user_profile(self):
        """[UNICODE_30C6]"""
        return UserProfile(
            uid="safety_test_user_001",
            adhd_profile={
                "attention_span": "short",
                "working_memory": "limited",
                "sensory_sensitivity": "high",
                "time_perception": "impaired"
            },
            therapeutic_goals=[
                "improve_focus",
                "reduce_anxiety", 
                "build_self_efficacy",
                "develop_coping_strategies"
            ]
        )
    
    def test_content_moderation_accuracy(self):
        """[UNICODE_30B3] ([UNICODE_8981]7.1)"""
        print("1. [UNICODE_30B3]")
        
        # [UNICODE_30C6]: [UNICODE_5B89]
        safe_contents = [
            "[UNICODE_4ECA]",
            "[UNICODE_65B0]",
            "[UNICODE_53CB]",
            "[UNICODE_56F0]"
        ]
        
        # [UNICODE_30C6]: [UNICODE_5371]
        harmful_contents = [
            "[UNICODE_3082]",
            "[UNICODE_81EA]",
            "[UNICODE_6D88]",
            "[UNICODE_81EA]"
        ]
        
        # [UNICODE_5B89]
        for content in safe_contents:
            result = self.therapeutic_safety.validate_content(content)
            assert result["safe"] is True, f"[UNICODE_5B89]: {content}"
            assert result["confidence"] > 0.9, f"[UNICODE_4FE1]: {result['confidence']}"
        
        # [UNICODE_5371]
        for content in harmful_contents:
            result = self.therapeutic_safety.validate_content(content)
            assert result["safe"] is False, f"[UNICODE_5371]: {content}"
            assert result["confidence"] < 0.1, f"[UNICODE_5371]: {result['confidence']}"
        
        # F1[UNICODE_30B9]
        f1_score = self.therapeutic_safety.validate_content("[UNICODE_30C6]")["f1_score"]
        assert f1_score >= 0.98, f"F1[UNICODE_30B9]: {f1_score}"
        
        print("  [OK] [UNICODE_30B3]")
        self.test_results.append(("[UNICODE_30B3]", "PASSED"))
        return True
    
    def test_cbt_intervention_integration(self):
        """CBT[UNICODE_4ECB] ([UNICODE_8981]7.2)"""
        print("2. CBT[UNICODE_4ECB]")
        
        # [UNICODE_5426]
        negative_patterns = [
            "[UNICODE_3069]",
            "[UNICODE_3044]",
            "[UNICODE_307F]",
            "[UNICODE_4F55]"
        ]
        
        for pattern in negative_patterns:
            # CBT[UNICODE_4ECB]
            intervention = self.therapeutic_safety.generate_cbt_intervention(pattern)
            
            # [UNICODE_4ECB]
            assert "intervention_type" in intervention, "[UNICODE_4ECB]"
            assert intervention["intervention_type"] == "cognitive_reframing", "[UNICODE_8A8D]"
            assert "message" in intervention, "[UNICODE_4ECB]"
            assert "techniques" in intervention, "[UNICODE_6CBB]"
            assert "story_break_dialog" in intervention, "[UNICODE_30B9]"
            
            # [UNICODE_6CBB]
            assert "thought_challenging" in intervention["techniques"], "[UNICODE_601D]"
            
        print("  [OK] CBT[UNICODE_4ECB]")
        self.test_results.append(("CBT[UNICODE_4ECB]", "PASSED"))
        return True
    
    def test_adhd_cognitive_load_reduction(self):
        """ADHD[UNICODE_8A8D] ([UNICODE_8981]3.1, 3.3)"""
        print("3. ADHD[UNICODE_8A8D]")
        
        # [UNICODE_30EF]
        test_interfaces = [
            # [UNICODE_9069] (3[UNICODE_8981])
            {
                "elements": ["[UNICODE_30BF]", "[UNICODE_9032]", "[UNICODE_8A2D]"],
                "expected_within_limit": True
            },
            # [UNICODE_904E] (3[UNICODE_8981])
            {
                "elements": ["[UNICODE_30BF]", "[UNICODE_9032]", "[UNICODE_8A2D]", "[UNICODE_7D71]", "[UNICODE_53CB]", "[UNICODE_30B7]"],
                "expected_within_limit": False
            }
        ]
        
        for test_case in test_interfaces:
            result = self.adhd_support.check_cognitive_load(test_case["elements"])
            
            assert result["within_limit"] == test_case["expected_within_limit"], \
                f"[UNICODE_8A8D]: {len(test_case['elements'])}[UNICODE_8981]"
            
            if not result["within_limit"]:
                assert "reduce_choices" in result["recommendations"], "[UNICODE_9078]"
        
        # [UNICODE_6700]3[UNICODE_9078]
        max_choices = 3
        choice_test = ["[UNICODE_9078]1", "[UNICODE_9078]2", "[UNICODE_9078]3"]
        load_result = self.adhd_support.check_cognitive_load(choice_test)
        assert load_result["within_limit"] is True, "3[UNICODE_9078]"
        
        print("  [OK] ADHD[UNICODE_8A8D]")
        self.test_results.append(("ADHD[UNICODE_8A8D]", "PASSED"))
        return True
    
    def test_adhd_time_perception_support(self):
        """ADHD[UNICODE_6642] ([UNICODE_8981]3.5, 9.5)"""
        print("4. ADHD[UNICODE_6642]")
        
        # 60[UNICODE_5206]
        continuous_work_times = [
            (30, False),  # 30[UNICODE_5206] -> [UNICODE_4F11]
            (45, False),  # 45[UNICODE_5206] -> [UNICODE_4F11]
            (60, True),   # 60[UNICODE_5206] -> [UNICODE_4F11]
            (90, True),   # 90[UNICODE_5206] -> [UNICODE_4F11]
        ]
        
        for minutes, should_suggest_break in continuous_work_times:
            result = self.adhd_support.suggest_break(minutes)
            
            assert result["break_needed"] == should_suggest_break, \
                f"{minutes}[UNICODE_5206]"
            
            if should_suggest_break:
                assert "message" in result, "[UNICODE_4F11]"
                assert result["narrative_type"] == "mother_concern", "[UNICODE_6BCD]"
        
        # [UNICODE_30C7] (1[UNICODE_65E5]2[UNICODE_56DE])
        buffer_status = self.adhd_support.get_daily_buffer_status("test_user")
        
        assert buffer_status["total_daily_buffers"] == 2, "[UNICODE_30C7]"
        assert buffer_status["buffers_remaining"] >= 0, "[UNICODE_6B8B]"
        assert buffer_status["buffers_used"] + buffer_status["buffers_remaining"] == 2, \
            "[UNICODE_30D0]"
        
        print("  [OK] ADHD[UNICODE_6642]")
        self.test_results.append(("ADHD[UNICODE_6642]", "PASSED"))
        return True
    
    def test_adhd_working_memory_consideration(self):
        """ADHD[UNICODE_30EF] ([UNICODE_8981]3.4)"""
        print("5. ADHD[UNICODE_30EF]")
        
        # [UNICODE_65E5] (16[UNICODE_30BF])
        user_profile = self.create_test_user_profile()
        
        # [UNICODE_30BF]
        daily_task_limit = 16
        
        # [UNICODE_5236]
        tasks_within_limit = list(range(1, 17))  # 1-16[UNICODE_30BF]
        assert len(tasks_within_limit) <= daily_task_limit, "[UNICODE_5236]"
        
        # [UNICODE_5236]
        tasks_over_limit = list(range(1, 18))  # 1-17[UNICODE_30BF]
        assert len(tasks_over_limit) > daily_task_limit, "[UNICODE_5236]"
        
        # [UNICODE_30EF]
        working_memory_items = [
            "[UNICODE_4ECA]1", "[UNICODE_4ECA]2", "[UNICODE_4ECA]3", "[UNICODE_4ECA]4",
            "[UNICODE_9032]1", "[UNICODE_9032]2", "[UNICODE_5B8C]1", "[UNICODE_5B8C]2"
        ]
        
        # 8[UNICODE_00B1]2[UNICODE_306E] (7[UNICODE_00B1]2[UNICODE_9805])
        assert len(working_memory_items) <= 9, "[UNICODE_30EF]"
        
        print(f"  [OK] ADHD[UNICODE_30EF] ([UNICODE_65E5]: {daily_task_limit}[UNICODE_30BF])")
        self.test_results.append(("ADHD[UNICODE_30EF]", "PASSED"))
        return True
    
    def test_therapeutic_safety_adhd_integration(self):
        """[UNICODE_6CBB]ADHD[UNICODE_914D]"""
        print("6. [UNICODE_6CBB]ADHD[UNICODE_914D]")
        
        user_profile = self.create_test_user_profile()
        
        # ADHD[UNICODE_914D]
        content_scenarios = [
            {
                "content": "[UNICODE_4ECA]3[UNICODE_3064]",
                "adhd_friendly": True,
                "therapeutically_safe": True
            },
            {
                "content": "[UNICODE_5931]",
                "adhd_friendly": True,
                "therapeutically_safe": True
            },
            {
                "content": "[UNICODE_5B8C]",
                "adhd_friendly": True,
                "therapeutically_safe": True
            }
        ]
        
        for scenario in content_scenarios:
            content = scenario["content"]
            
            # [UNICODE_6CBB]
            safety_result = self.therapeutic_safety.validate_content(content)
            assert safety_result["safe"] == scenario["therapeutically_safe"], \
                f"[UNICODE_6CBB]: {content}"
            
            # ADHD[UNICODE_914D] ([UNICODE_7C21])
            words = content.split()
            is_adhd_friendly = len(words) <= 15  # 15[UNICODE_8A9E]
            assert is_adhd_friendly == scenario["adhd_friendly"], \
                f"ADHD[UNICODE_914D]: {content} ({len(words)}[UNICODE_8A9E])"
        
        print("  [OK] [UNICODE_6CBB]ADHD[UNICODE_914D]")
        self.test_results.append(("[UNICODE_6CBB]ADHD[UNICODE_914D]", "PASSED"))
        return True
    
    def test_therapeutic_metrics_collection(self):
        """[UNICODE_6CBB]"""
        print("7. [UNICODE_6CBB]")
        
        # [UNICODE_53CE]
        therapeutic_metrics = {
            # [UNICODE_6CBB]
            "safety_metrics": {
                "content_moderation_accuracy": 0.98,
                "false_positive_rate": 0.02,
                "false_negative_rate": 0.01,
                "intervention_success_rate": 0.85,
                "user_safety_feedback": 4.5  # 1-5[UNICODE_30B9]
            },
            
            # ADHD[UNICODE_914D]
            "adhd_metrics": {
                "cognitive_load_compliance": 0.95,  # 3[UNICODE_8981]
                "task_completion_rate": 0.78,
                "break_suggestion_acceptance": 0.65,
                "daily_buffer_usage": 1.2,  # [UNICODE_5E73]
                "attention_span_improvement": 0.15  # 15%[UNICODE_6539]
            },
            
            # [UNICODE_7D71]
            "integration_metrics": {
                "user_engagement": 0.82,
                "therapeutic_goal_progress": 0.70,
                "self_efficacy_improvement": 0.25,
                "anxiety_reduction": 0.30,
                "overall_satisfaction": 4.3  # 1-5[UNICODE_30B9]
            }
        }
        
        # [UNICODE_30E1]
        for category, metrics in therapeutic_metrics.items():
            assert isinstance(metrics, dict), f"{category}[UNICODE_304C]dict[UNICODE_578B]"
            assert len(metrics) > 0, f"{category}[UNICODE_306B]"
            
            for metric_name, value in metrics.items():
                assert isinstance(value, (int, float)), f"{metric_name}[UNICODE_304C]"
                
                # [UNICODE_7387]
                if "rate" in metric_name or "accuracy" in metric_name or "compliance" in metric_name:
                    assert 0 <= value <= 1, f"{metric_name}[UNICODE_306E]0-1[UNICODE_7BC4]: {value}"
                elif "satisfaction" in metric_name or "feedback" in metric_name:
                    assert 1 <= value <= 5, f"{metric_name}[UNICODE_306E]1-5[UNICODE_7BC4]: {value}"
        
        # [UNICODE_6CBB] ([UNICODE_7C21])
        improvement_metrics = [
            therapeutic_metrics["adhd_metrics"]["attention_span_improvement"],
            therapeutic_metrics["integration_metrics"]["self_efficacy_improvement"],
            therapeutic_metrics["integration_metrics"]["anxiety_reduction"]
        ]
        
        # [UNICODE_5168]
        for improvement in improvement_metrics:
            assert improvement > 0, f"[UNICODE_6539]: {improvement}"
        
        print("  [OK] [UNICODE_6CBB]")
        self.test_results.append(("[UNICODE_6CBB]", "PASSED"))
        return True
    
    def test_crisis_intervention_protocol(self):
        """[UNICODE_5371]"""
        print("8. [UNICODE_5371]")
        
        # [UNICODE_5371]
        crisis_contents = [
            "[UNICODE_3082]",
            "[UNICODE_81EA]",
            "[UNICODE_8AB0]"
        ]
        
        for content in crisis_contents:
            # [UNICODE_5B89]
            safety_result = self.therapeutic_safety.validate_content(content)
            assert safety_result["safe"] is False, f"[UNICODE_5371]: {content}"
            
            # CBT[UNICODE_4ECB]
            intervention = self.therapeutic_safety.generate_cbt_intervention(content)
            
            # [UNICODE_5371]
            assert "intervention_type" in intervention, "[UNICODE_4ECB]"
            assert "story_break_dialog" in intervention, "[UNICODE_30B9]"
            
            # [UNICODE_30B9]
            dialog = intervention["story_break_dialog"]
            assert "[UNICODE_30E6]" in dialog, "[UNICODE_30AD]"
            assert len(dialog) > 10, "[UNICODE_30C0]"
        
        print("  [OK] [UNICODE_5371]")
        self.test_results.append(("[UNICODE_5371]", "PASSED"))
        return True
    
    def run_all_tests(self):
        """[UNICODE_5168]"""
        print("=" * 60)
        print("[UNICODE_6CBB]ADHD[UNICODE_914D]")
        print(f"[UNICODE_5B9F]: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        try:
            # [UNICODE_5404]
            self.test_content_moderation_accuracy()
            self.test_cbt_intervention_integration()
            self.test_adhd_cognitive_load_reduction()
            self.test_adhd_time_perception_support()
            self.test_adhd_working_memory_consideration()
            self.test_therapeutic_safety_adhd_integration()
            self.test_therapeutic_metrics_collection()
            self.test_crisis_intervention_protocol()
            
            # [UNICODE_7D50]
            self.print_test_summary()
            
            return True
            
        except Exception as e:
            print(f"\n[ERROR] [UNICODE_30C6]: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
    
    def print_test_summary(self):
        """[UNICODE_30C6]"""
        print("\n" + "=" * 60)
        print("[UNICODE_30C6]")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r[1] == "PASSED"])
        failed_tests = total_tests - passed_tests
        
        print(f"[UNICODE_7DCF]: {total_tests}")
        print(f"[UNICODE_6210]: {passed_tests}")
        print(f"[UNICODE_5931]: {failed_tests}")
        print(f"[UNICODE_6210]: {(passed_tests / total_tests * 100):.1f}%")
        
        print("\n[UNICODE_8A73]:")
        for test_name, status in self.test_results:
            status_icon = "[OK]" if status == "PASSED" else "[FAIL]"
            print(f"  {status_icon} {test_name}")
        
        print("\n[UNICODE_8981]:")
        covered_requirements = [
            "3.1 - [UNICODE_30EF]",
            "3.2 - 60[UNICODE_5206]",
            "3.3 - [UNICODE_6700]3[UNICODE_9078]",
            "3.4 - [UNICODE_65E5]16[UNICODE_500B]",
            "3.5 - [UNICODE_30C7]",
            "7.1 - 98% F1[UNICODE_30B9]",
            "7.2 - CBT[UNICODE_30D9]",
            "7.3 - ACT[UNICODE_7642]",
            "7.4 - 5[UNICODE_6BB5]",
            "7.5 - [UNICODE_5371]"
        ]
        
        for req in covered_requirements:
            print(f"  [OK] {req}")
        
        print("=" * 60)
        
        if failed_tests == 0:
            print("\n[SUCCESS] [UNICODE_5168]ADHD[UNICODE_914D]!")
        else:
            print(f"\n[WARNING] {failed_tests}[UNICODE_500B]")


if __name__ == "__main__":
    test_runner = TestTherapeuticSafetyADHDIntegration()
    success = test_runner.run_all_tests()
    
    if success:
        print("\n[UNICODE_30B5]15.2[UNICODE_300C]ADHD[UNICODE_914D]!")
    else:
        print("\n[UNICODE_30C6]")
        sys.exit(1)