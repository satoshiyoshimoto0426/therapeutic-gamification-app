"""
CBT Integration Service [UNICODE_30C6]

[UNICODE_30D6]
- [UNICODE_30D0]ABC[UNICODE_30E2]1[UNICODE_30BF]
- [UNICODE_6557]45[UNICODE_79D2]
- [UNICODE_6CBB]
"""

import pytest
import asyncio
from fastapi.testclient import TestClient
from datetime import datetime, timedelta
import json

# [UNICODE_30C6]
from main import app, cbt_engine, CBTTriggerType

client = TestClient(app)

class TestCBTIntegrationEngine:
    """CBT[UNICODE_7D71]"""
    
    async def test_battle_victory_abc_trigger(self):
        """[UNICODE_30D0]ABC[UNICODE_30E2]"""
        user_id = "victory_test_user"
        context = {
            "battle_result": {
                "enemy_type": "[UNICODE_5148]",
                "victory_type": "complete",
                "tasks_completed": 3,
                "xp_gained": 150
            },
            "event_description": "[UNICODE_5148]"
        }
        
        result = await cbt_engine.trigger_cbt_intervention(
            CBTTriggerType.BATTLE_VICTORY, user_id, context
        )
        
        assert result["success"] is True
        assert result["trigger_type"] == "battle_victory"
        assert "abc_prompt" in result
        assert result["abc_prompt"] is not None
        
        # ABC[UNICODE_30D7]
        abc_prompt = result["abc_prompt"]
        assert "[UNICODE_52DD]" in abc_prompt["title"]
        assert "prompts" in abc_prompt
        assert "activating_event" in abc_prompt["prompts"]
        assert "belief" in abc_prompt["prompts"]
        assert "consequence" in abc_prompt["prompts"]
        
        print("[UNICODE_2713] [UNICODE_30D0]ABC[UNICODE_30E2]")
        return result["session_id"]
    
    async def test_abc_entry_submission(self):
        """ABC[UNICODE_30A8]"""
        # [UNICODE_307E]
        session_id = await self.test_battle_victory_abc_trigger()
        
        abc_data = {
            "activating_event": "[UNICODE_5148]",
            "belief": "[UNICODE_3084]",
            "consequence": "[UNICODE_9054]"
        }
        
        result = await cbt_engine.submit_abc_entry(session_id, abc_data)
        
        assert result["success"] is True
        assert "entry_id" in result
        assert "rational_response" in result
        assert "thought_pattern_analysis" in result
        assert result["completion_reward"]["xp"] == 25
        
        # [UNICODE_601D]
        analysis = result["thought_pattern_analysis"]
        assert "detected_patterns" in analysis
        assert "cognitive_flexibility_score" in analysis
        
        print("[UNICODE_2713] ABC[UNICODE_30A8]")
        return result["entry_id"]
    
    async def test_battle_defeat_micro_intervention(self):
        """[UNICODE_30D0]"""
        user_id = "defeat_test_user"
        context = {
            "battle_result": {
                "enemy_type": "[UNICODE_4E0D]",
                "defeat_type": "overwhelming",
                "attempts": 3
            },
            "event_description": "[UNICODE_4E0D]"
        }
        
        result = await cbt_engine.trigger_cbt_intervention(
            CBTTriggerType.BATTLE_DEFEAT, user_id, context
        )
        
        assert result["success"] is True
        assert result["trigger_type"] == "battle_defeat"
        assert len(result["suggested_interventions"]) > 0
        
        # [UNICODE_4ECB]45[UNICODE_79D2]
        for intervention in result["suggested_interventions"]:
            assert intervention["duration_seconds"] <= 45
            assert "video_url" in intervention
            assert "technique" in intervention
        
        # [UNICODE_547C]overwhelming defeat[UNICODE_FF09]
        breathing_interventions = [
            i for i in result["suggested_interventions"] 
            if i["technique"] == "breathing"
        ]
        assert len(breathing_interventions) > 0
        
        print(f"[UNICODE_2713] [UNICODE_30D0]: {len(result['suggested_interventions'])}[UNICODE_500B]")
        return result["session_id"]
    
    async def test_intervention_completion(self):
        """[UNICODE_4ECB]"""
        # [UNICODE_307E]
        session_id = await self.test_battle_defeat_micro_intervention()
        
        # [UNICODE_6700]
        session = cbt_engine.cbt_sessions[session_id]
        intervention_id = session.interventions_suggested[0]
        effectiveness_rating = 4  # 5[UNICODE_6BB5]4
        
        result = await cbt_engine.complete_intervention(
            session_id, intervention_id, effectiveness_rating
        )
        
        assert result["success"] is True
        assert result["effectiveness_rating"] == 4
        assert "session_summary" in result
        assert "therapeutic_progress" in result
        
        # [UNICODE_30BB]
        summary = result["session_summary"]
        assert summary["total_interventions"] == 1
        assert summary["session_duration_minutes"] >= 0
        
        print("[UNICODE_2713] [UNICODE_4ECB]")
    
    async def test_negative_thought_intervention(self):
        """[UNICODE_5426]"""
        user_id = "negative_thought_user"
        context = {
            "thought_content": "[UNICODE_79C1]",
            "mood_rating": 2,
            "trigger_situation": "[UNICODE_30BF]"
        }
        
        result = await cbt_engine.trigger_cbt_intervention(
            CBTTriggerType.NEGATIVE_THOUGHT, user_id, context
        )
        
        assert result["success"] is True
        assert len(result["suggested_interventions"]) > 0
        
        # [UNICODE_601D]
        thought_stop_interventions = [
            i for i in result["suggested_interventions"]
            if "thought_stop" in i["technique"] or "thought_stopping" in i["technique"]
        ]
        assert len(thought_stop_interventions) > 0
        
        print("[UNICODE_2713] [UNICODE_5426]")
    
    async def test_thought_pattern_detection(self):
        """[UNICODE_601D]"""
        # [UNICODE_5168]
        abc_entry_data = {
            "activating_event": "[UNICODE_30D7]",
            "belief": "[UNICODE_5B8C]",
            "consequence": "[UNICODE_843D]"
        }
        
        # [UNICODE_30C6]ABC[UNICODE_30A8]
        from main import ABCModelEntry
        abc_entry = ABCModelEntry(
            entry_id="test_entry",
            user_id="pattern_test_user",
            trigger_event="[UNICODE_30D7]",
            activating_event=abc_entry_data["activating_event"],
            belief=abc_entry_data["belief"],
            consequence=abc_entry_data["consequence"],
            created_at=datetime.now(),
            therapeutic_context="test"
        )
        
        analysis = await cbt_engine._analyze_thought_patterns(abc_entry)
        
        assert "detected_patterns" in analysis
        assert len(analysis["detected_patterns"]) > 0
        
        # [UNICODE_5168]
        pattern_names = [p["pattern_name"] for p in analysis["detected_patterns"]]
        assert "[UNICODE_5168]" in pattern_names
        
        print(f"[UNICODE_2713] [UNICODE_601D]: {len(analysis['detected_patterns'])}[UNICODE_500B]")
    
    async def test_user_cbt_history(self):
        """[UNICODE_30E6]CBT[UNICODE_5C65]"""
        user_id = "history_test_user"
        
        # [UNICODE_8907]CBT[UNICODE_30BB]
        for i in range(3):
            context = {"test_session": i}
            await cbt_engine.trigger_cbt_intervention(
                CBTTriggerType.BATTLE_VICTORY, user_id, context
            )
        
        # [UNICODE_5C65]
        history = await cbt_engine.get_user_cbt_history(user_id, days=30)
        
        assert history["user_id"] == user_id
        assert history["summary"]["total_cbt_sessions"] >= 3
        assert "cognitive_progress" in history
        assert "recent_abc_entries" in history
        
        # [UNICODE_8A8D]
        progress = history["cognitive_progress"]
        assert 1 <= progress["awareness_level"] <= 5
        assert 1 <= progress["coping_skills"] <= 5
        assert 1 <= progress["thought_flexibility"] <= 5
        
        print(f"[UNICODE_2713] [UNICODE_30E6]CBT[UNICODE_5C65]: {history['summary']['total_cbt_sessions']}[UNICODE_30BB]")

class TestTherapeuticSafety:
    """[UNICODE_6CBB]"""
    
    def test_intervention_duration_limits(self):
        """[UNICODE_4ECB]"""
        for intervention in cbt_engine.micro_interventions:
            assert intervention.duration_seconds <= 45, f"[UNICODE_4ECB] {intervention.intervention_id} [UNICODE_304C]45[UNICODE_79D2]"
        
        print(f"[UNICODE_2713] [UNICODE_4ECB]: [UNICODE_5168]{len(cbt_engine.micro_interventions)}[UNICODE_500B]45[UNICODE_79D2]")
    
    def test_therapeutic_technique_coverage(self):
        """[UNICODE_6CBB]"""
        techniques = set()
        for intervention in cbt_engine.micro_interventions:
            techniques.add(intervention.therapeutic_technique)
        
        # [UNICODE_4E3B]
        expected_techniques = ["breathing", "reframing", "grounding", "self_compassion"]
        for technique in expected_techniques:
            assert any(technique in t for t in techniques), f"[UNICODE_6CBB] {technique} [UNICODE_304C]"
        
        print(f"[UNICODE_2713] [UNICODE_6CBB]: {len(techniques)}[UNICODE_7A2E]")
    
    def test_thought_pattern_comprehensiveness(self):
        """[UNICODE_601D]"""
        pattern_types = set()
        for pattern in cbt_engine.thought_patterns:
            pattern_types.add(pattern.cognitive_distortion_type)
        
        # [UNICODE_4E3B]
        expected_distortions = ["dichotomous_thinking", "catastrophizing", "mind_reading", "should_statements"]
        for distortion in expected_distortions:
            assert distortion in pattern_types, f"[UNICODE_8A8D] {distortion} [UNICODE_304C]"
        
        print(f"[UNICODE_2713] [UNICODE_601D]: {len(pattern_types)}[UNICODE_7A2E]")
    
    async def test_rational_response_generation(self):
        """[UNICODE_5408]"""
        test_beliefs = [
            "[UNICODE_79C1]",
            "[UNICODE_5168]",
            "[UNICODE_3084]"
        ]
        
        for belief in test_beliefs:
            from main import ABCModelEntry
            abc_entry = ABCModelEntry(
                entry_id="test",
                user_id="test_user",
                trigger_event="test",
                activating_event="test",
                belief=belief,
                consequence="test",
                created_at=datetime.now(),
                therapeutic_context="test"
            )
            
            rational_response = await cbt_engine._generate_rational_response(abc_entry)
            
            assert len(rational_response) > 0
            assert isinstance(rational_response, str)
        
        print("[UNICODE_2713] [UNICODE_5408]")

class TestAPIEndpoints:
    """API[UNICODE_30A8]"""
    
    def test_trigger_cbt_intervention_endpoint(self):
        """CBT[UNICODE_4ECB]"""
        request_data = {
            "trigger_type": "battle_victory",
            "user_id": "api_test_user",
            "context": {
                "battle_result": {
                    "enemy_type": "[UNICODE_5148]",
                    "victory_type": "complete"
                }
            }
        }
        
        response = client.post("/cbt/trigger", params={
            "trigger_type": request_data["trigger_type"],
            "user_id": request_data["user_id"]
        }, json=request_data["context"])
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "session_id" in data
        assert "abc_prompt" in data
        
        print("[UNICODE_2713] CBT[UNICODE_4ECB]")
    
    def test_list_interventions_endpoint(self):
        """[UNICODE_30DE]"""
        response = client.get("/cbt/interventions")
        
        assert response.status_code == 200
        data = response.json()
        assert "interventions" in data
        assert "total_count" in data
        assert data["max_duration_seconds"] == 45
        assert data["total_count"] > 0
        
        print(f"[UNICODE_2713] [UNICODE_30DE]: {data['total_count']}[UNICODE_500B]")
    
    def test_list_thought_patterns_endpoint(self):
        """[UNICODE_601D]"""
        response = client.get("/cbt/thought-patterns")
        
        assert response.status_code == 200
        data = response.json()
        assert "thought_patterns" in data
        assert "total_count" in data
        assert data["total_count"] > 0
        
        print(f"[UNICODE_2713] [UNICODE_601D]: {data['total_count']}[UNICODE_500B]")
    
    def test_cbt_analytics_endpoint(self):
        """CBT[UNICODE_5206]"""
        response = client.get("/cbt/analytics")
        
        assert response.status_code == 200
        data = response.json()
        assert "total_cbt_sessions" in data
        assert "total_abc_entries" in data
        assert "trigger_type_distribution" in data
        assert "therapeutic_outcomes" in data
        
        print("[UNICODE_2713] CBT[UNICODE_5206]")
    
    def test_user_history_endpoint(self):
        """[UNICODE_30E6]"""
        user_id = "api_history_user"
        
        response = client.get(f"/cbt/user/{user_id}/history?days=30")
        
        assert response.status_code == 200
        data = response.json()
        assert data["user_id"] == user_id
        assert "summary" in data
        assert "cognitive_progress" in data
        
        print("[UNICODE_2713] [UNICODE_30E6]")

def run_all_tests():
    """[UNICODE_5168]"""
    print("CBT Integration Service [UNICODE_30C6]")
    print("=" * 50)
    
    # [UNICODE_57FA]
    engine_tests = TestCBTIntegrationEngine()
    
    async def run_async_engine_tests():
        await engine_tests.test_battle_victory_abc_trigger()
        await engine_tests.test_abc_entry_submission()
        await engine_tests.test_battle_defeat_micro_intervention()
        await engine_tests.test_intervention_completion()
        await engine_tests.test_negative_thought_intervention()
        await engine_tests.test_thought_pattern_detection()
        await engine_tests.test_user_cbt_history()
    
    asyncio.run(run_async_engine_tests())
    
    # [UNICODE_6CBB]
    safety_tests = TestTherapeuticSafety()
    safety_tests.test_intervention_duration_limits()
    safety_tests.test_therapeutic_technique_coverage()
    safety_tests.test_thought_pattern_comprehensiveness()
    
    async def run_async_safety_tests():
        await safety_tests.test_rational_response_generation()
    
    asyncio.run(run_async_safety_tests())
    
    # API[UNICODE_30A8]
    api_tests = TestAPIEndpoints()
    api_tests.test_trigger_cbt_intervention_endpoint()
    api_tests.test_list_interventions_endpoint()
    api_tests.test_list_thought_patterns_endpoint()
    api_tests.test_cbt_analytics_endpoint()
    api_tests.test_user_history_endpoint()
    
    print("\n" + "=" * 50)
    print("[UNICODE_2713] CBT Integration Service [UNICODE_5168]")
    print("\n[UNICODE_30D6]:")
    print("- [UNICODE_30D0]ABC[UNICODE_30E2]1[UNICODE_30BF] [UNICODE_2713]")
    print("- [UNICODE_6557]45[UNICODE_79D2] [UNICODE_2713]")
    print("- [UNICODE_6CBB] [UNICODE_2713]")
    print("- [UNICODE_601D] [UNICODE_2713]")
    print("- CBT[UNICODE_52B9] [UNICODE_2713]")

if __name__ == "__main__":
    run_all_tests()