#!/usr/bin/env python3
"""
[UNICODE_6CBB] - [UNICODE_5305]

[UNICODE_30B2]
"""

import sys
import os
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import traceback

# [UNICODE_30D7]
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

class GameDebugger:
    """[UNICODE_30B2]"""
    
    def __init__(self):
        self.test_user_id = "debug_user_001"
        self.test_guardian_id = "debug_guardian_001"
        self.errors = []
        self.warnings = []
        self.success_count = 0
        self.total_tests = 0
        
    def log_error(self, test_name: str, error: str):
        """[UNICODE_30A8]"""
        self.errors.append(f"[ERROR] {test_name}: {error}")
        print(f"[UNICODE_274C] {test_name}: {error}")
        
    def log_warning(self, test_name: str, warning: str):
        """[UNICODE_8B66]"""
        self.warnings.append(f"[WARNING] {test_name}: {warning}")
        print(f"[UNICODE_26A0]  {test_name}: {warning}")
        
    def log_success(self, test_name: str, message: str = ""):
        """[UNICODE_6210]"""
        self.success_count += 1
        print(f"[UNICODE_2705] {test_name}: {message}")
        
    def run_test(self, test_name: str, test_func):
        """[UNICODE_30C6]"""
        self.total_tests += 1
        try:
            result = test_func()
            if result:
                self.log_success(test_name, str(result) if isinstance(result, str) else "[UNICODE_6210]")
            else:
                self.log_error(test_name, "[UNICODE_30C6]")
        except Exception as e:
            self.log_error(test_name, f"[UNICODE_4F8B]: {str(e)}")
            traceback.print_exc()
    
    def test_core_game_engine(self):
        """[UNICODE_30B3]"""
        print("\n=== [UNICODE_30B3] ===")
        
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'core-game'))
            from services.core_game.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            
            # [UNICODE_30D8]
            self.run_test("[UNICODE_30B3] - [UNICODE_30D8]", 
                         lambda: client.get("/health").status_code == 200)
            
            # XP[UNICODE_8FFD]
            self.run_test("[UNICODE_30B3] - XP[UNICODE_8FFD]", 
                         lambda: self._test_xp_addition(client))
            
            # [UNICODE_30EC]
            self.run_test("[UNICODE_30B3] - [UNICODE_30EC]", 
                         lambda: self._test_level_progression(client))
            
            # [UNICODE_5171]
            self.run_test("[UNICODE_30B3] - [UNICODE_5171]", 
                         lambda: self._test_resonance_events(client))
                         
        except ImportError as e:
            self.log_error("[UNICODE_30B3]", f"[UNICODE_30A4]: {e}")
        except Exception as e:
            self.log_error("[UNICODE_30B3]", f"[UNICODE_4E88]: {e}")
    
    def _test_xp_addition(self, client):
        """XP[UNICODE_8FFD]"""
        response = client.post("/xp/add", json={
            "user_id": self.test_user_id,
            "xp_amount": 100,
            "source": "task_completion"
        })
        return response.status_code == 200 and response.json().get("xp_added") == 100
    
    def _test_level_progression(self, client):
        """[UNICODE_30EC]"""
        response = client.post("/level/progress", json={
            "user_id": self.test_user_id
        })
        return response.status_code == 200 and "current_level" in response.json()
    
    def _test_resonance_events(self, client):
        """[UNICODE_5171]"""
        response = client.post("/system/status", json={
            "user_id": self.test_user_id
        })
        return response.status_code == 200
    
    def test_task_management(self):
        """[UNICODE_30BF]"""
        print("\n=== [UNICODE_30BF] ===")
        
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'task-mgmt'))
            from services.task_mgmt.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            
            # [UNICODE_30D8]
            self.run_test("[UNICODE_30BF] - [UNICODE_30D8]", 
                         lambda: client.get("/health").status_code == 200)
            
            # [UNICODE_30BF]
            self.run_test("[UNICODE_30BF] - [UNICODE_30BF]", 
                         lambda: self._test_task_creation(client))
            
            # [UNICODE_30BF]
            self.run_test("[UNICODE_30BF] - [UNICODE_30BF]", 
                         lambda: self._test_task_completion(client))
            
            # Pomodoro[UNICODE_30C6]
            self.run_test("[UNICODE_30BF] - Pomodoro[UNICODE_7D71]", 
                         lambda: self._test_pomodoro_integration(client))
                         
        except ImportError as e:
            self.log_error("[UNICODE_30BF]", f"[UNICODE_30A4]: {e}")
        except Exception as e:
            self.log_error("[UNICODE_30BF]", f"[UNICODE_4E88]: {e}")
    
    def _test_task_creation(self, client):
        """[UNICODE_30BF]"""
        response = client.post("/tasks", json={
            "user_id": self.test_user_id,
            "title": "[UNICODE_30C7]",
            "task_type": "routine",
            "difficulty": 3,
            "primary_crystal": "self_discipline"
        })
        return response.status_code == 200 and "task_id" in response.json()
    
    def _test_task_completion(self, client):
        """[UNICODE_30BF]"""
        # [UNICODE_307E]
        create_response = client.post("/tasks", json={
            "user_id": self.test_user_id,
            "title": "[UNICODE_5B8C]",
            "task_type": "routine",
            "difficulty": 2
        })
        
        if create_response.status_code != 200:
            return False
            
        task_id = create_response.json().get("task_id")
        
        # [UNICODE_30BF]
        complete_response = client.post(f"/tasks/{task_id}/complete", json={
            "user_id": self.test_user_id,
            "mood_score": 4,
            "actual_duration": 30
        })
        
        return complete_response.status_code == 200
    
    def _test_pomodoro_integration(self, client):
        """Pomodoro[UNICODE_7D71]"""
        response = client.post("/pomodoro/start", json={
            "user_id": self.test_user_id,
            "task_id": "test_task_001",
            "duration": 25
        })
        return response.status_code == 200
    
    def test_mandala_system(self):
        """Mandala[UNICODE_30B7]"""
        print("\n=== Mandala[UNICODE_30B7] ===")
        
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'mandala'))
            from services.mandala.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            
            # [UNICODE_30D8]
            self.run_test("Mandala - [UNICODE_30D8]", 
                         lambda: client.get("/health").status_code == 200)
            
            # [UNICODE_30B0]
            self.run_test("Mandala - [UNICODE_30B0]", 
                         lambda: self._test_mandala_grid(client))
            
            # [UNICODE_30BB]
            self.run_test("Mandala - [UNICODE_30BB]", 
                         lambda: self._test_cell_unlock(client))
                         
        except ImportError as e:
            self.log_error("Mandala[UNICODE_30B7]", f"[UNICODE_30A4]: {e}")
        except Exception as e:
            self.log_error("Mandala[UNICODE_30B7]", f"[UNICODE_4E88]: {e}")
    
    def _test_mandala_grid(self, client):
        """Mandala[UNICODE_30B0]"""
        response = client.get(f"/mandala/{self.test_user_id}/grid")
        if response.status_code == 200:
            grid = response.json().get("grid")
            return isinstance(grid, list) and len(grid) == 9
        return False
    
    def _test_cell_unlock(self, client):
        """[UNICODE_30BB]"""
        response = client.post(f"/mandala/{self.test_user_id}/unlock", json={
            "row": 1,
            "col": 1,
            "crystal_type": "self_discipline"
        })
        return response.status_code in [200, 400]  # 400[UNICODE_306F]
    
    def test_auth_system(self):
        """[UNICODE_8A8D]"""
        print("\n=== [UNICODE_8A8D] ===")
        
        try:
            from services.auth.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            
            # [UNICODE_30D8]
            self.run_test("[UNICODE_8A8D] - [UNICODE_30D8]", 
                         lambda: client.get("/health").status_code == 200)
            
            # Guardian[UNICODE_6A29]
            self.run_test("[UNICODE_8A8D] - Guardian[UNICODE_6A29]", 
                         lambda: self._test_guardian_access(client))
            
            # [UNICODE_30ED]
            self.run_test("[UNICODE_8A8D] - Guardian[UNICODE_30ED]", 
                         lambda: self._test_guardian_login(client))
                         
        except ImportError as e:
            self.log_error("[UNICODE_8A8D]", f"[UNICODE_30A4]: {e}")
        except Exception as e:
            self.log_error("[UNICODE_8A8D]", f"[UNICODE_4E88]: {e}")
    
    def _test_guardian_access(self, client):
        """Guardian[UNICODE_6A29]"""
        response = client.post("/auth/guardian/grant", json={
            "user_id": self.test_user_id,
            "guardian_id": self.test_guardian_id,
            "permission_level": "task-edit",
            "granted_by": "system_admin"
        })
        return response.status_code == 200
    
    def _test_guardian_login(self, client):
        """Guardian[UNICODE_30ED]"""
        response = client.post("/auth/guardian/login", json={
            "guardian_id": self.test_guardian_id,
            "user_id": self.test_user_id,
            "permission_level": "task-edit"
        })
        return response.status_code == 200 and "access_token" in response.json()
    
    def test_story_system(self):
        """[UNICODE_30B9]"""
        print("\n=== [UNICODE_30B9] ===")
        
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'ai-story'))
            from services.ai_story.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            
            # [UNICODE_30D8]
            self.run_test("[UNICODE_30B9] - [UNICODE_30D8]", 
                         lambda: client.get("/health").status_code == 200)
            
            # [UNICODE_30B9]
            self.run_test("[UNICODE_30B9] - [UNICODE_751F]", 
                         lambda: self._test_story_generation(client))
                         
        except ImportError as e:
            self.log_error("[UNICODE_30B9]", f"[UNICODE_30A4]: {e}")
        except Exception as e:
            self.log_error("[UNICODE_30B9]", f"[UNICODE_4E88]: {e}")
    
    def _test_story_generation(self, client):
        """[UNICODE_30B9]"""
        response = client.post("/story/generate", json={
            "user_id": self.test_user_id,
            "context": {
                "completed_tasks": 3,
                "mood_score": 4,
                "current_chapter": 1
            }
        })
        return response.status_code == 200
    
    def test_mood_tracking(self):
        """[UNICODE_6C17]"""
        print("\n=== [UNICODE_6C17] ===")
        
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'mood-tracking'))
            from services.mood_tracking.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            
            # [UNICODE_30D8]
            self.run_test("[UNICODE_6C17] - [UNICODE_30D8]", 
                         lambda: client.get("/health").status_code == 200)
            
            # [UNICODE_6C17]
            self.run_test("[UNICODE_6C17] - [UNICODE_6C17]", 
                         lambda: self._test_mood_logging(client))
                         
        except ImportError as e:
            self.log_error("[UNICODE_6C17]", f"[UNICODE_30A4]: {e}")
        except Exception as e:
            self.log_error("[UNICODE_6C17]", f"[UNICODE_4E88]: {e}")
    
    def _test_mood_logging(self, client):
        """[UNICODE_6C17]"""
        response = client.post("/mood/log", json={
            "user_id": self.test_user_id,
            "mood_score": 4,
            "energy_level": 3,
            "notes": "[UNICODE_30C7]"
        })
        return response.status_code == 200
    
    def test_integration_flow(self):
        """[UNICODE_7D71]"""
        print("\n=== [UNICODE_7D71] ===")
        
        # 1[UNICODE_65E5]
        self.run_test("[UNICODE_7D71] - [UNICODE_671D]", 
                     lambda: self._simulate_morning_tasks())
        
        self.run_test("[UNICODE_7D71] - [UNICODE_30BF]XP[UNICODE_7372]", 
                     lambda: self._simulate_task_execution())
        
        self.run_test("[UNICODE_7D71] - [UNICODE_591C]", 
                     lambda: self._simulate_evening_story())
        
        self.run_test("[UNICODE_7D71] - [UNICODE_30EC]", 
                     lambda: self._simulate_level_up())
    
    def _simulate_morning_tasks(self):
        """[UNICODE_671D]"""
        # LINE Bot[UNICODE_304B]
        try:
            # [UNICODE_5B9F]LINE Bot[UNICODE_7D71]
            return True
        except Exception:
            return False
    
    def _simulate_task_execution(self):
        """[UNICODE_30BF]"""
        # [UNICODE_30BF]XP[UNICODE_7372]
        try:
            return True
        except Exception:
            return False
    
    def _simulate_evening_story(self):
        """[UNICODE_591C]"""
        # 21:30[UNICODE_306E]
        try:
            return True
        except Exception:
            return False
    
    def _simulate_level_up(self):
        """[UNICODE_30EC]"""
        # [UNICODE_30EC]
        try:
            return True
        except Exception:
            return False
    
    def test_performance_issues(self):
        """[UNICODE_30D1]"""
        print("\n=== [UNICODE_30D1] ===")
        
        self.run_test("[UNICODE_30D1] - API[UNICODE_5FDC]", 
                     lambda: self._test_api_response_time())
        
        self.run_test("[UNICODE_30D1] - [UNICODE_30E1]", 
                     lambda: self._test_memory_usage())
        
        self.run_test("[UNICODE_30D1] - [UNICODE_540C]", 
                     lambda: self._test_concurrent_connections())
    
    def _test_api_response_time(self):
        """API[UNICODE_5FDC]"""
        import time
        start_time = time.time()
        
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'core-game'))
            from services.core_game.main import app
            from fastapi.testclient import TestClient
            
            client = TestClient(app)
            response = client.get("/health")
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response_time > 1.2:  # 1.2[UNICODE_79D2]
                self.log_warning("API[UNICODE_5FDC]", f"[UNICODE_5FDC]: {response_time:.2f}[UNICODE_79D2]")
            
            return response.status_code == 200
        except Exception:
            return False
    
    def _test_memory_usage(self):
        """[UNICODE_30E1]"""
        try:
            import psutil
            
            process = psutil.Process()
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            
            if memory_mb > 500:  # 500MB[UNICODE_4EE5]
                self.log_warning("[UNICODE_30E1]", f"[UNICODE_30E1]: {memory_mb:.1f}MB")
            
            return memory_mb < 1000  # 1GB[UNICODE_672A]
        except ImportError:
            self.log_warning("[UNICODE_30E1]", "psutil[UNICODE_304C]")
            return True  # psutil[UNICODE_304C]
    
    def _test_concurrent_connections(self):
        """[UNICODE_540C]"""
        # [UNICODE_7C21]
        try:
            import threading
            import time
            
            def make_request():
                try:
                    sys.path.append(os.path.join(os.path.dirname(__file__), 'services', 'core-game'))
                    from services.core_game.main import app
                    from fastapi.testclient import TestClient
                    
                    client = TestClient(app)
                    response = client.get("/health")
                    return response.status_code == 200
                except Exception:
                    return False
            
            # 10[UNICODE_500B]
            threads = []
            results = []
            
            for i in range(10):
                thread = threading.Thread(target=lambda: results.append(make_request()))
                threads.append(thread)
                thread.start()
            
            for thread in threads:
                thread.join()
            
            return all(results) if results else False
        except Exception:
            return False
    
    def generate_debug_report(self):
        """[UNICODE_30C7]"""
        print("\n" + "="*60)
        print("[UNICODE_1F3AE] [UNICODE_30B2]")
        print("="*60)
        
        print(f"\n[UNICODE_1F4CA] [UNICODE_30C6]:")
        print(f"  [UNICODE_7DCF]: {self.total_tests}")
        print(f"  [UNICODE_6210]: {self.success_count}")
        print(f"  [UNICODE_5931]: {self.total_tests - self.success_count}")
        print(f"  [UNICODE_6210]: {(self.success_count / self.total_tests * 100):.1f}%" if self.total_tests > 0 else "  [UNICODE_6210]: 0%")
        
        if self.errors:
            print(f"\n[UNICODE_274C] [UNICODE_30A8] ({len(self.errors)}[UNICODE_4EF6]):")
            for error in self.errors:
                print(f"  {error}")
        
        if self.warnings:
            print(f"\n[UNICODE_26A0]  [UNICODE_8B66] ({len(self.warnings)}[UNICODE_4EF6]):")
            for warning in self.warnings:
                print(f"  {warning}")
        
        print(f"\n[UNICODE_1F527] [UNICODE_63A8]:")
        if self.errors:
            print("  1. [UNICODE_30A8]")
            print("  2. [UNICODE_4F9D]")
            print("  3. [UNICODE_5FC5]")
        
        if self.warnings:
            print("  4. [UNICODE_30D1]")
            print("  5. [UNICODE_30E1]")
        
        print("  6. [UNICODE_7D71]")
        print("  7. [UNICODE_672C]")
        
        print(f"\n[UNICODE_23F0] [UNICODE_30C7]: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
    
    def run_all_tests(self):
        """[UNICODE_5168]"""
        print("[UNICODE_1F3AE] [UNICODE_6CBB] - [UNICODE_5305]")
        print(f"[UNICODE_5B9F]: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # [UNICODE_5404]
        self.test_core_game_engine()
        self.test_task_management()
        self.test_mandala_system()
        self.test_auth_system()
        self.test_story_system()
        self.test_mood_tracking()
        self.test_integration_flow()
        self.test_performance_issues()
        
        # [UNICODE_30C7]
        self.generate_debug_report()

def main():
    """[UNICODE_30E1]"""
    debugger = GameDebugger()
    debugger.run_all_tests()

if __name__ == "__main__":
    main()